// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="nodeDetector,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=7.500000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.407000,HLS_SYN_LAT=921605,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1396,HLS_SYN_LUT=2704,HLS_VERSION=2018_3}" *)

module nodeDetector (
        ap_clk,
        ap_rst_n,
        inStream_TDATA,
        inStream_TVALID,
        inStream_TREADY,
        inStream_TKEEP,
        inStream_TSTRB,
        inStream_TUSER,
        inStream_TLAST,
        inStream_TID,
        inStream_TDEST,
        outStream_TDATA,
        outStream_TVALID,
        outStream_TREADY,
        outStream_TKEEP,
        outStream_TSTRB,
        outStream_TUSER,
        outStream_TLAST,
        outStream_TID,
        outStream_TDEST,
        out_0_V,
        out_1_V,
        out_2_V,
        out_3_V,
        out_4_V,
        out_5_V,
        out_6_V,
        out2_0_V,
        out2_1_V,
        out2_2_V,
        out2_3_V,
        out2_4_V,
        out2_5_V,
        out2_6_V,
        s_axi_CRTL_BUS_AWVALID,
        s_axi_CRTL_BUS_AWREADY,
        s_axi_CRTL_BUS_AWADDR,
        s_axi_CRTL_BUS_WVALID,
        s_axi_CRTL_BUS_WREADY,
        s_axi_CRTL_BUS_WDATA,
        s_axi_CRTL_BUS_WSTRB,
        s_axi_CRTL_BUS_ARVALID,
        s_axi_CRTL_BUS_ARREADY,
        s_axi_CRTL_BUS_ARADDR,
        s_axi_CRTL_BUS_RVALID,
        s_axi_CRTL_BUS_RREADY,
        s_axi_CRTL_BUS_RDATA,
        s_axi_CRTL_BUS_RRESP,
        s_axi_CRTL_BUS_BVALID,
        s_axi_CRTL_BUS_BREADY,
        s_axi_CRTL_BUS_BRESP
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state7 = 3'd4;
parameter    C_S_AXI_CRTL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CRTL_BUS_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CRTL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [23:0] inStream_TDATA;
input   inStream_TVALID;
output   inStream_TREADY;
input  [2:0] inStream_TKEEP;
input  [2:0] inStream_TSTRB;
input  [1:0] inStream_TUSER;
input  [0:0] inStream_TLAST;
input  [4:0] inStream_TID;
input  [5:0] inStream_TDEST;
output  [23:0] outStream_TDATA;
output   outStream_TVALID;
input   outStream_TREADY;
output  [2:0] outStream_TKEEP;
output  [2:0] outStream_TSTRB;
output  [1:0] outStream_TUSER;
output  [0:0] outStream_TLAST;
output  [4:0] outStream_TID;
output  [5:0] outStream_TDEST;
output  [0:0] out_0_V;
output  [0:0] out_1_V;
output  [0:0] out_2_V;
output  [0:0] out_3_V;
output  [0:0] out_4_V;
output  [0:0] out_5_V;
output  [0:0] out_6_V;
output  [0:0] out2_0_V;
output  [0:0] out2_1_V;
output  [0:0] out2_2_V;
output  [0:0] out2_3_V;
output  [0:0] out2_4_V;
output  [0:0] out2_5_V;
output  [0:0] out2_6_V;
input   s_axi_CRTL_BUS_AWVALID;
output   s_axi_CRTL_BUS_AWREADY;
input  [C_S_AXI_CRTL_BUS_ADDR_WIDTH - 1:0] s_axi_CRTL_BUS_AWADDR;
input   s_axi_CRTL_BUS_WVALID;
output   s_axi_CRTL_BUS_WREADY;
input  [C_S_AXI_CRTL_BUS_DATA_WIDTH - 1:0] s_axi_CRTL_BUS_WDATA;
input  [C_S_AXI_CRTL_BUS_WSTRB_WIDTH - 1:0] s_axi_CRTL_BUS_WSTRB;
input   s_axi_CRTL_BUS_ARVALID;
output   s_axi_CRTL_BUS_ARREADY;
input  [C_S_AXI_CRTL_BUS_ADDR_WIDTH - 1:0] s_axi_CRTL_BUS_ARADDR;
output   s_axi_CRTL_BUS_RVALID;
input   s_axi_CRTL_BUS_RREADY;
output  [C_S_AXI_CRTL_BUS_DATA_WIDTH - 1:0] s_axi_CRTL_BUS_RDATA;
output  [1:0] s_axi_CRTL_BUS_RRESP;
output   s_axi_CRTL_BUS_BVALID;
input   s_axi_CRTL_BUS_BREADY;
output  [1:0] s_axi_CRTL_BUS_BRESP;

 reg    ap_rst_n_inv;
reg   [23:0] inStream_V_data_V_0_data_out;
wire    inStream_V_data_V_0_vld_in;
wire    inStream_V_data_V_0_vld_out;
wire    inStream_V_data_V_0_ack_in;
reg    inStream_V_data_V_0_ack_out;
reg   [23:0] inStream_V_data_V_0_payload_A;
reg   [23:0] inStream_V_data_V_0_payload_B;
reg    inStream_V_data_V_0_sel_rd;
reg    inStream_V_data_V_0_sel_wr;
wire    inStream_V_data_V_0_sel;
wire    inStream_V_data_V_0_load_A;
wire    inStream_V_data_V_0_load_B;
reg   [1:0] inStream_V_data_V_0_state;
wire    inStream_V_data_V_0_state_cmp_full;
reg   [2:0] inStream_V_keep_V_0_data_out;
wire    inStream_V_keep_V_0_vld_in;
wire    inStream_V_keep_V_0_vld_out;
wire    inStream_V_keep_V_0_ack_in;
reg    inStream_V_keep_V_0_ack_out;
reg   [2:0] inStream_V_keep_V_0_payload_A;
reg   [2:0] inStream_V_keep_V_0_payload_B;
reg    inStream_V_keep_V_0_sel_rd;
reg    inStream_V_keep_V_0_sel_wr;
wire    inStream_V_keep_V_0_sel;
wire    inStream_V_keep_V_0_load_A;
wire    inStream_V_keep_V_0_load_B;
reg   [1:0] inStream_V_keep_V_0_state;
wire    inStream_V_keep_V_0_state_cmp_full;
reg   [2:0] inStream_V_strb_V_0_data_out;
wire    inStream_V_strb_V_0_vld_in;
wire    inStream_V_strb_V_0_vld_out;
wire    inStream_V_strb_V_0_ack_in;
reg    inStream_V_strb_V_0_ack_out;
reg   [2:0] inStream_V_strb_V_0_payload_A;
reg   [2:0] inStream_V_strb_V_0_payload_B;
reg    inStream_V_strb_V_0_sel_rd;
reg    inStream_V_strb_V_0_sel_wr;
wire    inStream_V_strb_V_0_sel;
wire    inStream_V_strb_V_0_load_A;
wire    inStream_V_strb_V_0_load_B;
reg   [1:0] inStream_V_strb_V_0_state;
wire    inStream_V_strb_V_0_state_cmp_full;
reg   [1:0] inStream_V_user_V_0_data_out;
wire    inStream_V_user_V_0_vld_in;
wire    inStream_V_user_V_0_vld_out;
wire    inStream_V_user_V_0_ack_in;
reg    inStream_V_user_V_0_ack_out;
reg   [1:0] inStream_V_user_V_0_payload_A;
reg   [1:0] inStream_V_user_V_0_payload_B;
reg    inStream_V_user_V_0_sel_rd;
reg    inStream_V_user_V_0_sel_wr;
wire    inStream_V_user_V_0_sel;
wire    inStream_V_user_V_0_load_A;
wire    inStream_V_user_V_0_load_B;
reg   [1:0] inStream_V_user_V_0_state;
wire    inStream_V_user_V_0_state_cmp_full;
reg   [0:0] inStream_V_last_V_0_data_out;
wire    inStream_V_last_V_0_vld_in;
wire    inStream_V_last_V_0_vld_out;
wire    inStream_V_last_V_0_ack_in;
reg    inStream_V_last_V_0_ack_out;
reg   [0:0] inStream_V_last_V_0_payload_A;
reg   [0:0] inStream_V_last_V_0_payload_B;
reg    inStream_V_last_V_0_sel_rd;
reg    inStream_V_last_V_0_sel_wr;
wire    inStream_V_last_V_0_sel;
wire    inStream_V_last_V_0_load_A;
wire    inStream_V_last_V_0_load_B;
reg   [1:0] inStream_V_last_V_0_state;
wire    inStream_V_last_V_0_state_cmp_full;
reg   [4:0] inStream_V_id_V_0_data_out;
wire    inStream_V_id_V_0_vld_in;
wire    inStream_V_id_V_0_vld_out;
wire    inStream_V_id_V_0_ack_in;
reg    inStream_V_id_V_0_ack_out;
reg   [4:0] inStream_V_id_V_0_payload_A;
reg   [4:0] inStream_V_id_V_0_payload_B;
reg    inStream_V_id_V_0_sel_rd;
reg    inStream_V_id_V_0_sel_wr;
wire    inStream_V_id_V_0_sel;
wire    inStream_V_id_V_0_load_A;
wire    inStream_V_id_V_0_load_B;
reg   [1:0] inStream_V_id_V_0_state;
wire    inStream_V_id_V_0_state_cmp_full;
reg   [5:0] inStream_V_dest_V_0_data_out;
wire    inStream_V_dest_V_0_vld_in;
wire    inStream_V_dest_V_0_vld_out;
wire    inStream_V_dest_V_0_ack_in;
reg    inStream_V_dest_V_0_ack_out;
reg   [5:0] inStream_V_dest_V_0_payload_A;
reg   [5:0] inStream_V_dest_V_0_payload_B;
reg    inStream_V_dest_V_0_sel_rd;
reg    inStream_V_dest_V_0_sel_wr;
wire    inStream_V_dest_V_0_sel;
wire    inStream_V_dest_V_0_load_A;
wire    inStream_V_dest_V_0_load_B;
reg   [1:0] inStream_V_dest_V_0_state;
wire    inStream_V_dest_V_0_state_cmp_full;
reg   [23:0] outStream_V_data_V_1_data_out;
reg    outStream_V_data_V_1_vld_in;
wire    outStream_V_data_V_1_vld_out;
wire    outStream_V_data_V_1_ack_in;
wire    outStream_V_data_V_1_ack_out;
reg   [23:0] outStream_V_data_V_1_payload_A;
reg   [23:0] outStream_V_data_V_1_payload_B;
reg    outStream_V_data_V_1_sel_rd;
reg    outStream_V_data_V_1_sel_wr;
wire    outStream_V_data_V_1_sel;
wire    outStream_V_data_V_1_load_A;
wire    outStream_V_data_V_1_load_B;
reg   [1:0] outStream_V_data_V_1_state;
wire    outStream_V_data_V_1_state_cmp_full;
reg   [2:0] outStream_V_keep_V_1_data_out;
reg    outStream_V_keep_V_1_vld_in;
wire    outStream_V_keep_V_1_vld_out;
wire    outStream_V_keep_V_1_ack_in;
wire    outStream_V_keep_V_1_ack_out;
reg   [2:0] outStream_V_keep_V_1_payload_A;
reg   [2:0] outStream_V_keep_V_1_payload_B;
reg    outStream_V_keep_V_1_sel_rd;
reg    outStream_V_keep_V_1_sel_wr;
wire    outStream_V_keep_V_1_sel;
wire    outStream_V_keep_V_1_load_A;
wire    outStream_V_keep_V_1_load_B;
reg   [1:0] outStream_V_keep_V_1_state;
wire    outStream_V_keep_V_1_state_cmp_full;
reg   [2:0] outStream_V_strb_V_1_data_out;
reg    outStream_V_strb_V_1_vld_in;
wire    outStream_V_strb_V_1_vld_out;
wire    outStream_V_strb_V_1_ack_in;
wire    outStream_V_strb_V_1_ack_out;
reg   [2:0] outStream_V_strb_V_1_payload_A;
reg   [2:0] outStream_V_strb_V_1_payload_B;
reg    outStream_V_strb_V_1_sel_rd;
reg    outStream_V_strb_V_1_sel_wr;
wire    outStream_V_strb_V_1_sel;
wire    outStream_V_strb_V_1_load_A;
wire    outStream_V_strb_V_1_load_B;
reg   [1:0] outStream_V_strb_V_1_state;
wire    outStream_V_strb_V_1_state_cmp_full;
reg   [1:0] outStream_V_user_V_1_data_out;
reg    outStream_V_user_V_1_vld_in;
wire    outStream_V_user_V_1_vld_out;
wire    outStream_V_user_V_1_ack_in;
wire    outStream_V_user_V_1_ack_out;
reg   [1:0] outStream_V_user_V_1_payload_A;
reg   [1:0] outStream_V_user_V_1_payload_B;
reg    outStream_V_user_V_1_sel_rd;
reg    outStream_V_user_V_1_sel_wr;
wire    outStream_V_user_V_1_sel;
wire    outStream_V_user_V_1_load_A;
wire    outStream_V_user_V_1_load_B;
reg   [1:0] outStream_V_user_V_1_state;
wire    outStream_V_user_V_1_state_cmp_full;
reg   [0:0] outStream_V_last_V_1_data_out;
reg    outStream_V_last_V_1_vld_in;
wire    outStream_V_last_V_1_vld_out;
wire    outStream_V_last_V_1_ack_in;
wire    outStream_V_last_V_1_ack_out;
reg   [0:0] outStream_V_last_V_1_payload_A;
reg   [0:0] outStream_V_last_V_1_payload_B;
reg    outStream_V_last_V_1_sel_rd;
reg    outStream_V_last_V_1_sel_wr;
wire    outStream_V_last_V_1_sel;
wire    outStream_V_last_V_1_load_A;
wire    outStream_V_last_V_1_load_B;
reg   [1:0] outStream_V_last_V_1_state;
wire    outStream_V_last_V_1_state_cmp_full;
reg   [4:0] outStream_V_id_V_1_data_out;
reg    outStream_V_id_V_1_vld_in;
wire    outStream_V_id_V_1_vld_out;
wire    outStream_V_id_V_1_ack_in;
wire    outStream_V_id_V_1_ack_out;
reg   [4:0] outStream_V_id_V_1_payload_A;
reg   [4:0] outStream_V_id_V_1_payload_B;
reg    outStream_V_id_V_1_sel_rd;
reg    outStream_V_id_V_1_sel_wr;
wire    outStream_V_id_V_1_sel;
wire    outStream_V_id_V_1_load_A;
wire    outStream_V_id_V_1_load_B;
reg   [1:0] outStream_V_id_V_1_state;
wire    outStream_V_id_V_1_state_cmp_full;
reg   [5:0] outStream_V_dest_V_1_data_out;
reg    outStream_V_dest_V_1_vld_in;
wire    outStream_V_dest_V_1_vld_out;
wire    outStream_V_dest_V_1_ack_in;
wire    outStream_V_dest_V_1_ack_out;
reg   [5:0] outStream_V_dest_V_1_payload_A;
reg   [5:0] outStream_V_dest_V_1_payload_B;
reg    outStream_V_dest_V_1_sel_rd;
reg    outStream_V_dest_V_1_sel_wr;
wire    outStream_V_dest_V_1_sel;
wire    outStream_V_dest_V_1_load_A;
wire    outStream_V_dest_V_1_load_B;
reg   [1:0] outStream_V_dest_V_1_state;
wire    outStream_V_dest_V_1_state_cmp_full;
wire   [7:0] enable_V;
wire   [15:0] pos_0_V;
wire   [15:0] pos_1_V;
wire   [15:0] pos_2_V;
wire   [15:0] pos_3_V;
wire   [15:0] pos_4_V;
wire   [15:0] pos_5_V;
wire   [15:0] pos_6_V;
wire   [15:0] horizontalPos_V;
reg   [0:0] detections_0;
reg   [0:0] detections_1;
reg   [0:0] detections_2;
reg   [0:0] detections_3;
reg   [0:0] detections_4;
reg   [0:0] detections_5;
reg   [0:0] detections_6;
reg   [0:0] detections2_0;
reg   [0:0] detections2_1;
reg   [0:0] detections2_2;
reg   [0:0] detections2_3;
reg   [0:0] detections2_4;
reg   [0:0] detections2_5;
reg   [0:0] detections2_6;
reg    inStream_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] exitcond1_fu_652_p2;
reg    outStream_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] exitcond1_reg_3378;
reg   [0:0] exitcond1_reg_3378_pp0_iter2_reg;
reg    ap_enable_reg_pp0_iter4;
reg   [0:0] exitcond1_reg_3378_pp0_iter3_reg;
reg   [31:0] rowCnt_reg_415;
reg   [31:0] columnCnt_reg_426;
reg   [19:0] i_reg_437;
reg   [0:0] tmp_18_reg_3174;
wire    ap_CS_fsm_state1;
reg   [0:0] tmp_19_reg_3180;
wire   [0:0] tmp_23_fu_464_p3;
reg   [0:0] tmp_23_reg_3186;
wire   [0:0] rev9_fu_472_p2;
reg   [0:0] rev9_reg_3191;
wire   [0:0] tmp_24_fu_478_p3;
reg   [0:0] tmp_24_reg_3198;
wire   [0:0] rev_fu_486_p2;
reg   [0:0] rev_reg_3203;
wire   [0:0] tmp_25_fu_492_p3;
reg   [0:0] tmp_25_reg_3214;
wire   [0:0] rev1_fu_500_p2;
reg   [0:0] rev1_reg_3219;
wire   [0:0] tmp_26_fu_506_p3;
reg   [0:0] tmp_26_reg_3238;
wire   [0:0] rev2_fu_514_p2;
reg   [0:0] rev2_reg_3243;
wire   [0:0] tmp_30_fu_520_p3;
reg   [0:0] tmp_30_reg_3278;
wire   [0:0] rev3_fu_528_p2;
reg   [0:0] rev3_reg_3283;
wire   [0:0] tmp_31_fu_534_p1;
reg   [0:0] tmp_31_reg_3333;
wire  signed [31:0] tmp_15_fu_538_p1;
reg  signed [31:0] tmp_15_reg_3338;
wire  signed [31:0] ret_V_cast_fu_552_p1;
reg  signed [31:0] ret_V_cast_reg_3343;
wire   [0:0] icmp_fu_566_p2;
reg   [0:0] icmp_reg_3348;
wire   [0:0] icmp1_fu_582_p2;
reg   [0:0] icmp1_reg_3353;
wire   [0:0] icmp2_fu_598_p2;
reg   [0:0] icmp2_reg_3358;
wire   [0:0] icmp3_fu_614_p2;
reg   [0:0] icmp3_reg_3363;
wire   [0:0] icmp4_fu_630_p2;
reg   [0:0] icmp4_reg_3368;
wire   [0:0] icmp5_fu_646_p2;
reg   [0:0] icmp5_reg_3373;
reg    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_state5_io;
wire    ap_block_state6_pp0_stage0_iter4;
reg    ap_block_state6_io;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond1_reg_3378_pp0_iter1_reg;
wire   [19:0] i_1_fu_658_p2;
reg   [23:0] tmp_data_V_1_reg_3387;
reg   [23:0] tmp_data_V_1_reg_3387_pp0_iter1_reg;
reg   [23:0] tmp_data_V_1_reg_3387_pp0_iter2_reg;
reg   [2:0] tmp_keep_V_reg_3392;
reg   [2:0] tmp_keep_V_reg_3392_pp0_iter1_reg;
reg   [2:0] tmp_keep_V_reg_3392_pp0_iter2_reg;
reg   [2:0] tmp_strb_V_reg_3397;
reg   [2:0] tmp_strb_V_reg_3397_pp0_iter1_reg;
reg   [2:0] tmp_strb_V_reg_3397_pp0_iter2_reg;
reg   [1:0] tmp_user_V_reg_3402;
reg   [1:0] tmp_user_V_reg_3402_pp0_iter1_reg;
reg   [1:0] tmp_user_V_reg_3402_pp0_iter2_reg;
reg   [0:0] tmp_last_V_reg_3407;
reg   [0:0] tmp_last_V_reg_3407_pp0_iter1_reg;
reg   [0:0] tmp_last_V_reg_3407_pp0_iter2_reg;
reg   [4:0] tmp_id_V_reg_3412;
reg   [4:0] tmp_id_V_reg_3412_pp0_iter1_reg;
reg   [4:0] tmp_id_V_reg_3412_pp0_iter2_reg;
reg   [5:0] tmp_dest_V_reg_3417;
reg   [5:0] tmp_dest_V_reg_3417_pp0_iter1_reg;
reg   [5:0] tmp_dest_V_reg_3417_pp0_iter2_reg;
wire   [31:0] i_op_assign_fu_706_p3;
reg   [31:0] i_op_assign_reg_3422;
wire   [0:0] tmp_16_fu_714_p2;
reg   [0:0] tmp_16_reg_3433;
reg   [0:0] tmp_16_reg_3433_pp0_iter1_reg;
reg   [0:0] tmp_16_reg_3433_pp0_iter2_reg;
wire   [0:0] tmp_17_fu_719_p2;
reg   [0:0] tmp_17_reg_3445;
reg   [0:0] tmp_17_reg_3445_pp0_iter1_reg;
reg   [0:0] tmp_17_reg_3445_pp0_iter2_reg;
wire   [0:0] tmp_29_fu_762_p2;
reg   [0:0] tmp_29_reg_3457;
wire   [31:0] rowCnt_2_fu_780_p3;
wire   [31:0] columnCnt_2_fu_788_p3;
wire   [0:0] tmp_9_fu_827_p2;
reg   [0:0] tmp_9_reg_3485;
wire   [0:0] tmp_10_fu_836_p2;
reg   [0:0] tmp_10_reg_3490;
wire   [0:0] tmp_12_fu_845_p2;
reg   [0:0] tmp_12_reg_3495;
wire   [0:0] tmp_14_fu_854_p2;
reg   [0:0] tmp_14_reg_3501;
wire   [0:0] sel_tmp4_fu_924_p2;
reg   [0:0] sel_tmp4_reg_3507;
reg   [0:0] sel_tmp4_reg_3507_pp0_iter2_reg;
wire   [0:0] sel_tmp12_fu_930_p2;
reg   [0:0] sel_tmp12_reg_3512;
wire   [0:0] sel_tmp15_fu_936_p2;
reg   [0:0] sel_tmp15_reg_3531;
wire   [0:0] sel_tmp16_fu_942_p2;
reg   [0:0] sel_tmp16_reg_3540;
wire   [0:0] sel_tmp21_fu_958_p2;
reg   [0:0] sel_tmp21_reg_3546;
wire   [0:0] sel_tmp25_fu_974_p2;
reg   [0:0] sel_tmp25_reg_3552;
wire   [0:0] sel_tmp30_fu_990_p2;
reg   [0:0] sel_tmp30_reg_3558;
wire   [0:0] sel_tmp45_fu_995_p2;
reg   [0:0] sel_tmp45_reg_3564;
wire   [0:0] sel_tmp56_fu_1001_p2;
reg   [0:0] sel_tmp56_reg_3570;
wire   [0:0] sel_tmp68_fu_1007_p2;
reg   [0:0] sel_tmp68_reg_3576;
wire   [0:0] sel_tmp73_fu_1025_p2;
reg   [0:0] sel_tmp73_reg_3582;
wire   [0:0] sel_tmp618_demorgan_fu_1030_p2;
reg   [0:0] sel_tmp618_demorgan_reg_3588;
wire   [0:0] tmp34_fu_2439_p2;
reg   [0:0] tmp34_reg_3636;
wire   [0:0] tmp49_fu_2534_p2;
reg   [0:0] tmp49_reg_3641;
wire   [0:0] tmp56_fu_2576_p2;
reg   [0:0] tmp56_reg_3646;
wire   [0:0] tmp62_fu_2628_p2;
reg   [0:0] tmp62_reg_3651;
wire   [0:0] tmp71_fu_2682_p2;
reg   [0:0] tmp71_reg_3656;
wire   [0:0] tmp78_fu_2724_p2;
reg   [0:0] tmp78_reg_3661;
wire   [0:0] tmp86_fu_2772_p2;
reg   [0:0] tmp86_reg_3666;
wire   [0:0] tmp93_fu_2814_p2;
reg   [0:0] tmp93_reg_3671;
wire   [0:0] tmp109_fu_2927_p2;
reg   [0:0] tmp109_reg_3676;
wire   [0:0] tmp112_fu_2945_p2;
reg   [0:0] tmp112_reg_3681;
wire   [0:0] tmp115_fu_2968_p2;
reg   [0:0] tmp115_reg_3686;
wire   [0:0] tmp122_fu_3016_p2;
reg   [0:0] tmp122_reg_3691;
wire   [23:0] tmp_data_V_fu_3166_p3;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
wire   [0:0] brmerge1368_demorgan_fu_1042_p2;
wire   [0:0] brmerge1370_demorgan_fu_1058_p2;
wire   [0:0] brmerge1372_demorgan_fu_1074_p2;
wire   [0:0] brmerge1374_demorgan_fu_1090_p2;
wire   [0:0] brmerge1376_demorgan_fu_1106_p2;
wire   [0:0] brmerge1378_demorgan_fu_1122_p2;
wire   [0:0] brmerge1380_demorgan_fu_1138_p2;
wire   [0:0] brmerge1382_demorgan_fu_1154_p2;
wire   [0:0] brmerge1385_demorgan_fu_1170_p2;
wire   [0:0] brmerge1388_demorgan_fu_1186_p2;
wire   [0:0] brmerge1391_demorgan_fu_1202_p2;
wire   [0:0] brmerge1394_demorgan_fu_1218_p2;
wire   [0:0] brmerge1397_demorgan_fu_1234_p2;
wire   [0:0] brmerge1400_demorgan_fu_1250_p2;
reg    ap_block_pp0_stage0_01001;
wire  signed [15:0] tmp_15_fu_538_p0;
wire  signed [15:0] lhs_V_cast_fu_542_p0;
wire  signed [16:0] lhs_V_cast_fu_542_p1;
wire   [16:0] ret_V_fu_546_p2;
wire   [6:0] tmp_32_fu_556_p4;
wire   [5:0] tmp_33_fu_572_p4;
wire   [4:0] tmp_34_fu_588_p4;
wire   [3:0] tmp_35_fu_604_p4;
wire   [2:0] tmp_36_fu_620_p4;
wire   [1:0] tmp_37_fu_636_p4;
wire   [0:0] tmp_1_fu_692_p2;
wire   [31:0] i_op_assign_1_fu_698_p3;
wire   [7:0] tmp_127_fu_730_p1;
wire   [7:0] lhs_V_3_cast_fu_740_p4;
wire   [0:0] tmp_21_fu_734_p2;
wire   [0:0] tmp_22_fu_750_p2;
wire   [0:0] tmp_28_fu_756_p2;
wire   [0:0] tmp_20_fu_724_p2;
wire   [31:0] rowCnt_1_fu_768_p2;
wire   [31:0] columnCnt_1_fu_774_p2;
wire  signed [31:0] tmp_2_fu_796_p1;
wire  signed [31:0] tmp_4_fu_805_p1;
wire  signed [31:0] tmp_6_fu_814_p1;
wire  signed [31:0] tmp_8_fu_823_p1;
wire  signed [31:0] tmp_s_fu_832_p1;
wire  signed [31:0] tmp_11_fu_841_p1;
wire  signed [31:0] tmp_13_fu_850_p1;
wire   [0:0] tmp_3_fu_800_p2;
wire   [0:0] tmp_5_fu_809_p2;
wire   [0:0] tmp_7_fu_818_p2;
wire   [0:0] sel_tmp3_fu_864_p2;
wire   [0:0] sel_tmp6_fu_869_p2;
wire   [0:0] tmp1_fu_894_p2;
wire   [0:0] sel_tmp1_fu_859_p2;
wire   [0:0] sel_tmp9_fu_874_p2;
wire   [0:0] sel_tmp7_fu_879_p2;
wire   [0:0] sel_tmp_fu_884_p2;
wire   [0:0] sel_tmp2_fu_889_p2;
wire   [0:0] tmp4_fu_912_p2;
wire   [0:0] tmp3_fu_906_p2;
wire   [0:0] tmp5_fu_918_p2;
wire   [0:0] tmp2_fu_900_p2;
wire   [0:0] sel_tmp19_fu_947_p2;
wire   [0:0] sel_tmp20_fu_953_p2;
wire   [0:0] sel_tmp32_demorgan_fu_963_p2;
wire   [0:0] sel_tmp24_fu_968_p2;
wire   [0:0] sel_tmp38_demorgan_fu_979_p2;
wire   [0:0] sel_tmp29_fu_984_p2;
wire   [0:0] sel_tmp267_demorgan_fu_1013_p2;
wire   [0:0] sel_tmp72_fu_1019_p2;
wire   [0:0] sel_tmp5_fu_1260_p2;
wire   [0:0] sel_tmp10_fu_1270_p2;
wire   [0:0] sel_tmp13_fu_1280_p2;
wire   [0:0] sel_tmp17_fu_1289_p2;
wire   [0:0] sel_tmp22_fu_1298_p2;
wire   [0:0] sel_tmp26_fu_1307_p2;
wire   [0:0] sel_tmp27_fu_1311_p2;
wire   [0:0] sel_tmp31_fu_1321_p2;
wire   [0:0] sel_tmp32_fu_1325_p2;
wire   [0:0] sel_tmp34_fu_1335_p2;
wire   [0:0] sel_tmp18_fu_1293_p2;
wire   [0:0] sel_tmp38_fu_1358_p2;
wire   [0:0] sel_tmp23_fu_1302_p2;
wire   [0:0] sel_tmp41_fu_1373_p2;
wire   [0:0] sel_tmp43_fu_1384_p2;
wire   [0:0] sel_tmp46_fu_1393_p2;
wire   [0:0] sel_tmp28_fu_1316_p2;
wire   [0:0] sel_tmp49_fu_1408_p2;
wire   [0:0] sel_tmp51_fu_1419_p2;
wire   [0:0] sel_tmp53_fu_1429_p2;
wire   [0:0] sel_tmp54_fu_1433_p2;
wire   [0:0] sel_tmp57_fu_1443_p2;
wire   [0:0] sel_tmp58_fu_1447_p2;
wire   [0:0] sel_tmp59_fu_1452_p2;
wire   [0:0] sel_tmp33_fu_1330_p2;
wire   [0:0] sel_tmp63_fu_1474_p2;
wire   [0:0] sel_tmp65_fu_1484_p2;
wire   [0:0] sel_tmp66_fu_1488_p2;
wire   [0:0] sel_tmp69_fu_1498_p2;
wire   [0:0] sel_tmp70_fu_1502_p2;
wire   [0:0] sel_tmp74_fu_1512_p2;
wire   [0:0] sel_tmp75_fu_1516_p2;
wire   [0:0] sel_tmp76_fu_1521_p2;
wire   [0:0] sel_tmp79_fu_1537_p2;
wire   [0:0] sel_tmp44_fu_1388_p2;
wire   [0:0] sel_tmp83_fu_1560_p2;
wire   [0:0] sel_tmp47_fu_1397_p2;
wire   [0:0] sel_tmp86_fu_1577_p2;
wire   [0:0] sel_tmp88_fu_1588_p2;
wire   [0:0] sel_tmp89_fu_1592_p2;
wire   [0:0] sel_tmp52_fu_1424_p2;
wire   [0:0] sel_tmp93_fu_1614_p2;
wire   [0:0] sel_tmp55_fu_1438_p2;
wire   [0:0] sel_tmp96_fu_1631_p2;
wire   [0:0] sel_tmp98_fu_1642_p2;
wire   [0:0] sel_tmp99_fu_1647_p2;
wire   [0:0] sel_tmp103_fu_1669_p2;
wire   [0:0] sel_tmp105_fu_1679_p2;
wire   [0:0] sel_tmp106_fu_1683_p2;
wire   [0:0] sel_tmp107_fu_1688_p2;
wire   [0:0] sel_tmp62_fu_1468_p2;
wire   [0:0] sel_tmp64_fu_1479_p2;
wire   [0:0] sel_tmp111_fu_1710_p2;
wire   [0:0] sel_tmp67_fu_1493_p2;
wire   [0:0] sel_tmp114_fu_1727_p2;
wire   [0:0] sel_tmp116_fu_1738_p2;
wire   [0:0] sel_tmp117_fu_1743_p2;
wire   [0:0] sel_tmp71_fu_1507_p2;
wire   [0:0] sel_tmp121_fu_1765_p2;
wire   [0:0] sel_tmp123_fu_1775_p2;
wire   [0:0] sel_tmp124_fu_1779_p2;
wire   [0:0] sel_tmp125_fu_1784_p2;
wire   [0:0] sel_tmp129_fu_1806_p2;
wire   [0:0] sel_tmp131_fu_1816_p2;
wire   [0:0] sel_tmp132_fu_1820_p2;
wire   [0:0] sel_tmp134_fu_1830_p2;
wire   [0:0] sel_tmp135_fu_1835_p2;
wire   [0:0] sel_tmp136_fu_1840_p2;
wire   [0:0] sel_tmp138_fu_1850_p2;
wire   [0:0] sel_tmp141_fu_1867_p2;
wire   [0:0] sel_tmp102_fu_1663_p2;
wire   [0:0] sel_tmp104_fu_1674_p2;
wire   [0:0] sel_tmp145_fu_1890_p2;
wire   [0:0] sel_tmp148_fu_1907_p2;
wire   [0:0] sel_tmp150_fu_1918_p2;
wire   [0:0] sel_tmp151_fu_1923_p2;
wire   [0:0] sel_tmp154_fu_1939_p2;
wire   [0:0] sel_tmp120_fu_1759_p2;
wire   [0:0] sel_tmp122_fu_1770_p2;
wire   [0:0] sel_tmp158_fu_1962_p2;
wire   [0:0] sel_tmp161_fu_1979_p2;
wire   [0:0] sel_tmp163_fu_1990_p2;
wire   [0:0] sel_tmp164_fu_1995_p2;
wire   [0:0] sel_tmp128_fu_1800_p2;
wire   [0:0] sel_tmp130_fu_1811_p2;
wire   [0:0] sel_tmp168_fu_2017_p2;
wire   [0:0] sel_tmp133_fu_1825_p2;
wire   [0:0] sel_tmp171_fu_2034_p2;
wire   [0:0] sel_tmp173_fu_2045_p2;
wire   [0:0] sel_tmp174_fu_2050_p2;
wire   [0:0] sel_tmp137_fu_1845_p2;
wire   [0:0] sel_tmp178_fu_2072_p2;
wire   [0:0] sel_tmp1004_demorgan_fu_2082_p2;
wire   [0:0] sel_tmp180_fu_2086_p2;
wire   [0:0] sel_tmp181_fu_2092_p2;
wire   [0:0] sel_tmp182_fu_2097_p2;
wire   [0:0] sel_tmp185_fu_2113_p2;
wire   [0:0] sel_tmp189_fu_2136_p2;
wire   [0:0] sel_tmp192_fu_2153_p2;
wire   [0:0] sel_tmp194_fu_2164_p2;
wire   [0:0] sel_tmp1257_demorgan_fu_2187_p2;
wire   [0:0] sel_tmp198_fu_2192_p2;
wire   [0:0] sel_tmp1349_demorgan_fu_2203_p2;
wire   [0:0] sel_tmp200_fu_2208_p2;
wire   [0:0] sel_tmp1364_demorgan_fu_2219_p2;
wire   [0:0] sel_tmp8_fu_1265_p2;
wire   [0:0] sel_tmp11_fu_1275_p2;
wire   [0:0] sel_tmp14_fu_1284_p2;
wire   [0:0] sel_tmp203_fu_2235_p2;
wire   [0:0] tmp7_fu_2241_p2;
wire   [0:0] tmp6_fu_2230_p2;
wire   [0:0] sel_tmp205_fu_2258_p2;
wire   [0:0] sel_tmp204_fu_2252_p2;
wire   [0:0] tmp9_fu_2264_p2;
wire   [0:0] tmp10_fu_2270_p2;
wire   [0:0] tmp8_fu_2246_p2;
wire   [0:0] sel_tmp35_fu_1341_p2;
wire   [0:0] sel_tmp36_fu_1346_p2;
wire   [0:0] tmp13_fu_2287_p2;
wire   [0:0] tmp12_fu_2281_p2;
wire   [0:0] sel_tmp37_fu_1352_p2;
wire   [0:0] sel_tmp39_fu_1362_p2;
wire   [0:0] sel_tmp206_fu_2299_p2;
wire   [0:0] sel_tmp40_fu_1367_p2;
wire   [0:0] sel_tmp42_fu_1379_p2;
wire   [0:0] tmp16_fu_2310_p2;
wire   [0:0] tmp15_fu_2305_p2;
wire   [0:0] tmp17_fu_2316_p2;
wire   [0:0] tmp14_fu_2293_p2;
wire   [0:0] tmp18_fu_2322_p2;
wire   [0:0] tmp11_fu_2275_p2;
wire   [0:0] sel_tmp207_fu_2334_p2;
wire   [0:0] sel_tmp48_fu_1402_p2;
wire   [0:0] sel_tmp50_fu_1414_p2;
wire   [0:0] tmp21_fu_2345_p2;
wire   [0:0] tmp20_fu_2340_p2;
wire   [0:0] sel_tmp208_fu_2357_p2;
wire   [0:0] sel_tmp60_fu_1457_p2;
wire   [0:0] sel_tmp61_fu_1462_p2;
wire   [0:0] tmp24_fu_2368_p2;
wire   [0:0] tmp23_fu_2363_p2;
wire   [0:0] tmp25_fu_2374_p2;
wire   [0:0] tmp22_fu_2351_p2;
wire   [0:0] sel_tmp210_fu_2392_p2;
wire   [0:0] sel_tmp209_fu_2386_p2;
wire   [0:0] tmp27_fu_2398_p2;
wire   [0:0] sel_tmp77_fu_1526_p2;
wire   [0:0] sel_tmp78_fu_1531_p2;
wire   [0:0] tmp30_fu_2415_p2;
wire   [0:0] tmp29_fu_2409_p2;
wire   [0:0] tmp31_fu_2421_p2;
wire   [0:0] tmp28_fu_2404_p2;
wire   [0:0] tmp32_fu_2427_p2;
wire   [0:0] tmp26_fu_2380_p2;
wire   [0:0] tmp33_fu_2433_p2;
wire   [0:0] tmp19_fu_2328_p2;
wire   [0:0] sel_tmp80_fu_1543_p2;
wire   [0:0] sel_tmp81_fu_1548_p2;
wire   [0:0] sel_tmp82_fu_1554_p2;
wire   [0:0] sel_tmp84_fu_1566_p2;
wire   [0:0] tmp36_fu_2451_p2;
wire   [0:0] tmp35_fu_2445_p2;
wire   [0:0] sel_tmp85_fu_1571_p2;
wire   [0:0] sel_tmp87_fu_1583_p2;
wire   [0:0] sel_tmp90_fu_1597_p2;
wire   [0:0] sel_tmp91_fu_1602_p2;
wire   [0:0] tmp39_fu_2469_p2;
wire   [0:0] tmp38_fu_2463_p2;
wire   [0:0] tmp40_fu_2475_p2;
wire   [0:0] tmp37_fu_2457_p2;
wire   [0:0] sel_tmp92_fu_1608_p2;
wire   [0:0] sel_tmp94_fu_1620_p2;
wire   [0:0] sel_tmp95_fu_1625_p2;
wire   [0:0] sel_tmp97_fu_1637_p2;
wire   [0:0] tmp43_fu_2493_p2;
wire   [0:0] tmp42_fu_2487_p2;
wire   [0:0] sel_tmp100_fu_1652_p2;
wire   [0:0] sel_tmp101_fu_1657_p2;
wire   [0:0] sel_tmp211_fu_2511_p2;
wire   [0:0] tmp46_fu_2517_p2;
wire   [0:0] tmp45_fu_2505_p2;
wire   [0:0] tmp47_fu_2522_p2;
wire   [0:0] tmp44_fu_2499_p2;
wire   [0:0] tmp48_fu_2528_p2;
wire   [0:0] tmp41_fu_2481_p2;
wire   [0:0] sel_tmp108_fu_1693_p2;
wire   [0:0] sel_tmp109_fu_1698_p2;
wire   [0:0] sel_tmp110_fu_1704_p2;
wire   [0:0] sel_tmp112_fu_1716_p2;
wire   [0:0] tmp51_fu_2546_p2;
wire   [0:0] tmp50_fu_2540_p2;
wire   [0:0] sel_tmp113_fu_1721_p2;
wire   [0:0] sel_tmp115_fu_1733_p2;
wire   [0:0] sel_tmp118_fu_1748_p2;
wire   [0:0] sel_tmp119_fu_1753_p2;
wire   [0:0] tmp54_fu_2564_p2;
wire   [0:0] tmp53_fu_2558_p2;
wire   [0:0] tmp55_fu_2570_p2;
wire   [0:0] tmp52_fu_2552_p2;
wire   [0:0] sel_tmp212_fu_2582_p2;
wire   [0:0] sel_tmp126_fu_1789_p2;
wire   [0:0] sel_tmp127_fu_1794_p2;
wire   [0:0] tmp58_fu_2593_p2;
wire   [0:0] tmp57_fu_2588_p2;
wire   [0:0] sel_tmp214_fu_2611_p2;
wire   [0:0] sel_tmp213_fu_2605_p2;
wire   [0:0] tmp60_fu_2617_p2;
wire   [0:0] tmp61_fu_2623_p2;
wire   [0:0] tmp59_fu_2599_p2;
wire   [0:0] sel_tmp216_fu_2640_p2;
wire   [0:0] sel_tmp215_fu_2634_p2;
wire   [0:0] tmp66_fu_2646_p2;
wire   [0:0] sel_tmp139_fu_1856_p2;
wire   [0:0] sel_tmp140_fu_1861_p2;
wire   [0:0] sel_tmp217_fu_2664_p2;
wire   [0:0] tmp69_fu_2670_p2;
wire   [0:0] tmp68_fu_2658_p2;
wire   [0:0] tmp70_fu_2676_p2;
wire   [0:0] tmp67_fu_2652_p2;
wire   [0:0] sel_tmp142_fu_1873_p2;
wire   [0:0] sel_tmp143_fu_1878_p2;
wire   [0:0] sel_tmp144_fu_1884_p2;
wire   [0:0] sel_tmp146_fu_1896_p2;
wire   [0:0] tmp73_fu_2694_p2;
wire   [0:0] tmp72_fu_2688_p2;
wire   [0:0] sel_tmp147_fu_1901_p2;
wire   [0:0] sel_tmp149_fu_1913_p2;
wire   [0:0] sel_tmp152_fu_1928_p2;
wire   [0:0] sel_tmp153_fu_1933_p2;
wire   [0:0] tmp76_fu_2712_p2;
wire   [0:0] tmp75_fu_2706_p2;
wire   [0:0] tmp77_fu_2718_p2;
wire   [0:0] tmp74_fu_2700_p2;
wire   [0:0] sel_tmp218_fu_2730_p2;
wire   [0:0] sel_tmp155_fu_1945_p2;
wire   [0:0] sel_tmp156_fu_1950_p2;
wire   [0:0] tmp81_fu_2742_p2;
wire   [0:0] tmp80_fu_2736_p2;
wire   [0:0] sel_tmp157_fu_1956_p2;
wire   [0:0] sel_tmp159_fu_1968_p2;
wire   [0:0] sel_tmp160_fu_1973_p2;
wire   [0:0] sel_tmp162_fu_1985_p2;
wire   [0:0] tmp84_fu_2760_p2;
wire   [0:0] tmp83_fu_2754_p2;
wire   [0:0] tmp85_fu_2766_p2;
wire   [0:0] tmp82_fu_2748_p2;
wire   [0:0] sel_tmp165_fu_2000_p2;
wire   [0:0] sel_tmp166_fu_2005_p2;
wire   [0:0] sel_tmp167_fu_2011_p2;
wire   [0:0] sel_tmp169_fu_2023_p2;
wire   [0:0] tmp88_fu_2784_p2;
wire   [0:0] tmp87_fu_2778_p2;
wire   [0:0] sel_tmp170_fu_2028_p2;
wire   [0:0] sel_tmp172_fu_2040_p2;
wire   [0:0] sel_tmp175_fu_2055_p2;
wire   [0:0] sel_tmp176_fu_2060_p2;
wire   [0:0] tmp91_fu_2802_p2;
wire   [0:0] tmp90_fu_2796_p2;
wire   [0:0] tmp92_fu_2808_p2;
wire   [0:0] tmp89_fu_2790_p2;
wire   [0:0] sel_tmp177_fu_2066_p2;
wire   [0:0] sel_tmp179_fu_2077_p2;
wire   [0:0] sel_tmp219_fu_2820_p2;
wire   [0:0] sel_tmp183_fu_2102_p2;
wire   [0:0] sel_tmp184_fu_2107_p2;
wire   [0:0] tmp97_fu_2831_p2;
wire   [0:0] tmp96_fu_2826_p2;
wire   [0:0] sel_tmp221_fu_2849_p2;
wire   [0:0] sel_tmp220_fu_2843_p2;
wire   [0:0] tmp99_fu_2855_p2;
wire   [0:0] tmp100_fu_2861_p2;
wire   [0:0] tmp98_fu_2837_p2;
wire   [0:0] sel_tmp186_fu_2119_p2;
wire   [0:0] sel_tmp187_fu_2124_p2;
wire   [0:0] sel_tmp222_fu_2879_p2;
wire   [0:0] tmp103_fu_2885_p2;
wire   [0:0] tmp102_fu_2873_p2;
wire   [0:0] sel_tmp188_fu_2130_p2;
wire   [0:0] sel_tmp190_fu_2142_p2;
wire   [0:0] sel_tmp223_fu_2903_p2;
wire   [0:0] tmp106_fu_2909_p2;
wire   [0:0] tmp105_fu_2897_p2;
wire   [0:0] tmp107_fu_2915_p2;
wire   [0:0] tmp104_fu_2891_p2;
wire   [0:0] tmp108_fu_2921_p2;
wire   [0:0] tmp101_fu_2867_p2;
wire   [0:0] sel_tmp191_fu_2147_p2;
wire   [0:0] sel_tmp193_fu_2159_p2;
wire   [0:0] tmp111_fu_2939_p2;
wire   [0:0] tmp110_fu_2933_p2;
wire   [0:0] sel_tmp195_fu_2170_p2;
wire   [0:0] sel_tmp196_fu_2175_p2;
wire   [0:0] sel_tmp197_fu_2181_p2;
wire   [0:0] sel_tmp199_fu_2198_p2;
wire   [0:0] sel_tmp224_fu_2957_p2;
wire   [0:0] tmp114_fu_2963_p2;
wire   [0:0] tmp113_fu_2951_p2;
wire   [0:0] sel_tmp226_fu_2980_p2;
wire   [0:0] sel_tmp225_fu_2974_p2;
wire   [0:0] tmp117_fu_2986_p2;
wire   [0:0] sel_tmp201_fu_2214_p2;
wire   [0:0] sel_tmp202_fu_2224_p2;
wire   [0:0] tmp120_fu_3004_p2;
wire   [0:0] tmp119_fu_2998_p2;
wire   [0:0] tmp121_fu_3010_p2;
wire   [0:0] tmp118_fu_2992_p2;
wire   [0:0] tmp63_fu_3096_p2;
wire   [0:0] tmp64_fu_3100_p2;
wire   [0:0] tmp94_fu_3114_p2;
wire   [0:0] tmp79_fu_3110_p2;
wire   [0:0] tmp116_fu_3124_p2;
wire   [0:0] tmp123_fu_3128_p2;
wire   [0:0] tmp124_fu_3133_p2;
wire   [0:0] tmp95_fu_3118_p2;
wire   [0:0] tmp125_fu_3138_p2;
wire   [0:0] tmp65_fu_3105_p2;
wire   [0:0] or_cond_fu_3092_p2;
wire   [0:0] sel_tmp227_fu_3144_p2;
wire   [0:0] tmp126_fu_3150_p2;
wire   [0:0] sel_tmp228_fu_3156_p2;
wire   [0:0] tmp_27_fu_3161_p2;
reg   [2:0] ap_NS_fsm;
wire    ap_CS_fsm_state7;
reg    ap_block_state7;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_1151;

// power-on initialization
initial begin
#0 inStream_V_data_V_0_sel_rd = 1'b0;
#0 inStream_V_data_V_0_sel_wr = 1'b0;
#0 inStream_V_data_V_0_state = 2'd0;
#0 inStream_V_keep_V_0_sel_rd = 1'b0;
#0 inStream_V_keep_V_0_sel_wr = 1'b0;
#0 inStream_V_keep_V_0_state = 2'd0;
#0 inStream_V_strb_V_0_sel_rd = 1'b0;
#0 inStream_V_strb_V_0_sel_wr = 1'b0;
#0 inStream_V_strb_V_0_state = 2'd0;
#0 inStream_V_user_V_0_sel_rd = 1'b0;
#0 inStream_V_user_V_0_sel_wr = 1'b0;
#0 inStream_V_user_V_0_state = 2'd0;
#0 inStream_V_last_V_0_sel_rd = 1'b0;
#0 inStream_V_last_V_0_sel_wr = 1'b0;
#0 inStream_V_last_V_0_state = 2'd0;
#0 inStream_V_id_V_0_sel_rd = 1'b0;
#0 inStream_V_id_V_0_sel_wr = 1'b0;
#0 inStream_V_id_V_0_state = 2'd0;
#0 inStream_V_dest_V_0_sel_rd = 1'b0;
#0 inStream_V_dest_V_0_sel_wr = 1'b0;
#0 inStream_V_dest_V_0_state = 2'd0;
#0 outStream_V_data_V_1_sel_rd = 1'b0;
#0 outStream_V_data_V_1_sel_wr = 1'b0;
#0 outStream_V_data_V_1_state = 2'd0;
#0 outStream_V_keep_V_1_sel_rd = 1'b0;
#0 outStream_V_keep_V_1_sel_wr = 1'b0;
#0 outStream_V_keep_V_1_state = 2'd0;
#0 outStream_V_strb_V_1_sel_rd = 1'b0;
#0 outStream_V_strb_V_1_sel_wr = 1'b0;
#0 outStream_V_strb_V_1_state = 2'd0;
#0 outStream_V_user_V_1_sel_rd = 1'b0;
#0 outStream_V_user_V_1_sel_wr = 1'b0;
#0 outStream_V_user_V_1_state = 2'd0;
#0 outStream_V_last_V_1_sel_rd = 1'b0;
#0 outStream_V_last_V_1_sel_wr = 1'b0;
#0 outStream_V_last_V_1_state = 2'd0;
#0 outStream_V_id_V_1_sel_rd = 1'b0;
#0 outStream_V_id_V_1_sel_wr = 1'b0;
#0 outStream_V_id_V_1_state = 2'd0;
#0 outStream_V_dest_V_1_sel_rd = 1'b0;
#0 outStream_V_dest_V_1_sel_wr = 1'b0;
#0 outStream_V_dest_V_1_state = 2'd0;
#0 detections_0 = 1'd0;
#0 detections_1 = 1'd0;
#0 detections_2 = 1'd0;
#0 detections_3 = 1'd0;
#0 detections_4 = 1'd0;
#0 detections_5 = 1'd0;
#0 detections_6 = 1'd0;
#0 detections2_0 = 1'd0;
#0 detections2_1 = 1'd0;
#0 detections2_2 = 1'd0;
#0 detections2_3 = 1'd0;
#0 detections2_4 = 1'd0;
#0 detections2_5 = 1'd0;
#0 detections2_6 = 1'd0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

nodeDetector_CRTL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CRTL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CRTL_BUS_DATA_WIDTH ))
nodeDetector_CRTL_BUS_s_axi_U(
    .AWVALID(s_axi_CRTL_BUS_AWVALID),
    .AWREADY(s_axi_CRTL_BUS_AWREADY),
    .AWADDR(s_axi_CRTL_BUS_AWADDR),
    .WVALID(s_axi_CRTL_BUS_WVALID),
    .WREADY(s_axi_CRTL_BUS_WREADY),
    .WDATA(s_axi_CRTL_BUS_WDATA),
    .WSTRB(s_axi_CRTL_BUS_WSTRB),
    .ARVALID(s_axi_CRTL_BUS_ARVALID),
    .ARREADY(s_axi_CRTL_BUS_ARREADY),
    .ARADDR(s_axi_CRTL_BUS_ARADDR),
    .RVALID(s_axi_CRTL_BUS_RVALID),
    .RREADY(s_axi_CRTL_BUS_RREADY),
    .RDATA(s_axi_CRTL_BUS_RDATA),
    .RRESP(s_axi_CRTL_BUS_RRESP),
    .BVALID(s_axi_CRTL_BUS_BVALID),
    .BREADY(s_axi_CRTL_BUS_BREADY),
    .BRESP(s_axi_CRTL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .enable_V(enable_V),
    .pos_0_V(pos_0_V),
    .pos_1_V(pos_1_V),
    .pos_2_V(pos_2_V),
    .pos_3_V(pos_3_V),
    .pos_4_V(pos_4_V),
    .pos_5_V(pos_5_V),
    .pos_6_V(pos_6_V),
    .horizontalPos_V(horizontalPos_V)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state1)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if ((1'b1 == ap_CS_fsm_state1)) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_data_V_0_ack_out == 1'b1) & (inStream_V_data_V_0_vld_out == 1'b1))) begin
            inStream_V_data_V_0_sel_rd <= ~inStream_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_data_V_0_ack_in == 1'b1) & (inStream_V_data_V_0_vld_in == 1'b1))) begin
            inStream_V_data_V_0_sel_wr <= ~inStream_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_data_V_0_vld_in == 1'b0) & (inStream_V_data_V_0_state == 2'd2)) | ((inStream_V_data_V_0_vld_in == 1'b0) & (inStream_V_data_V_0_state == 2'd3) & (inStream_V_data_V_0_ack_out == 1'b1)))) begin
            inStream_V_data_V_0_state <= 2'd2;
        end else if ((((inStream_V_data_V_0_ack_out == 1'b0) & (inStream_V_data_V_0_state == 2'd1)) | ((inStream_V_data_V_0_ack_out == 1'b0) & (inStream_V_data_V_0_state == 2'd3) & (inStream_V_data_V_0_vld_in == 1'b1)))) begin
            inStream_V_data_V_0_state <= 2'd1;
        end else if (((~((inStream_V_data_V_0_vld_in == 1'b0) & (inStream_V_data_V_0_ack_out == 1'b1)) & ~((inStream_V_data_V_0_ack_out == 1'b0) & (inStream_V_data_V_0_vld_in == 1'b1)) & (inStream_V_data_V_0_state == 2'd3)) | ((inStream_V_data_V_0_state == 2'd1) & (inStream_V_data_V_0_ack_out == 1'b1)) | ((inStream_V_data_V_0_state == 2'd2) & (inStream_V_data_V_0_vld_in == 1'b1)))) begin
            inStream_V_data_V_0_state <= 2'd3;
        end else begin
            inStream_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_dest_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_dest_V_0_ack_out == 1'b1) & (inStream_V_dest_V_0_vld_out == 1'b1))) begin
            inStream_V_dest_V_0_sel_rd <= ~inStream_V_dest_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_dest_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_dest_V_0_ack_in == 1'b1) & (inStream_V_dest_V_0_vld_in == 1'b1))) begin
            inStream_V_dest_V_0_sel_wr <= ~inStream_V_dest_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_dest_V_0_state == 2'd2) & (inStream_V_dest_V_0_vld_in == 1'b0)) | ((inStream_V_dest_V_0_state == 2'd3) & (inStream_V_dest_V_0_vld_in == 1'b0) & (inStream_V_dest_V_0_ack_out == 1'b1)))) begin
            inStream_V_dest_V_0_state <= 2'd2;
        end else if ((((inStream_V_dest_V_0_state == 2'd1) & (inStream_V_dest_V_0_ack_out == 1'b0)) | ((inStream_V_dest_V_0_state == 2'd3) & (inStream_V_dest_V_0_ack_out == 1'b0) & (inStream_V_dest_V_0_vld_in == 1'b1)))) begin
            inStream_V_dest_V_0_state <= 2'd1;
        end else if (((~((inStream_V_dest_V_0_vld_in == 1'b0) & (inStream_V_dest_V_0_ack_out == 1'b1)) & ~((inStream_V_dest_V_0_ack_out == 1'b0) & (inStream_V_dest_V_0_vld_in == 1'b1)) & (inStream_V_dest_V_0_state == 2'd3)) | ((inStream_V_dest_V_0_state == 2'd1) & (inStream_V_dest_V_0_ack_out == 1'b1)) | ((inStream_V_dest_V_0_state == 2'd2) & (inStream_V_dest_V_0_vld_in == 1'b1)))) begin
            inStream_V_dest_V_0_state <= 2'd3;
        end else begin
            inStream_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_id_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_id_V_0_ack_out == 1'b1) & (inStream_V_id_V_0_vld_out == 1'b1))) begin
            inStream_V_id_V_0_sel_rd <= ~inStream_V_id_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_id_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_id_V_0_ack_in == 1'b1) & (inStream_V_id_V_0_vld_in == 1'b1))) begin
            inStream_V_id_V_0_sel_wr <= ~inStream_V_id_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_id_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_id_V_0_state == 2'd2) & (inStream_V_id_V_0_vld_in == 1'b0)) | ((inStream_V_id_V_0_state == 2'd3) & (inStream_V_id_V_0_vld_in == 1'b0) & (inStream_V_id_V_0_ack_out == 1'b1)))) begin
            inStream_V_id_V_0_state <= 2'd2;
        end else if ((((inStream_V_id_V_0_state == 2'd1) & (inStream_V_id_V_0_ack_out == 1'b0)) | ((inStream_V_id_V_0_state == 2'd3) & (inStream_V_id_V_0_ack_out == 1'b0) & (inStream_V_id_V_0_vld_in == 1'b1)))) begin
            inStream_V_id_V_0_state <= 2'd1;
        end else if (((~((inStream_V_id_V_0_vld_in == 1'b0) & (inStream_V_id_V_0_ack_out == 1'b1)) & ~((inStream_V_id_V_0_ack_out == 1'b0) & (inStream_V_id_V_0_vld_in == 1'b1)) & (inStream_V_id_V_0_state == 2'd3)) | ((inStream_V_id_V_0_state == 2'd1) & (inStream_V_id_V_0_ack_out == 1'b1)) | ((inStream_V_id_V_0_state == 2'd2) & (inStream_V_id_V_0_vld_in == 1'b1)))) begin
            inStream_V_id_V_0_state <= 2'd3;
        end else begin
            inStream_V_id_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_keep_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_keep_V_0_ack_out == 1'b1) & (inStream_V_keep_V_0_vld_out == 1'b1))) begin
            inStream_V_keep_V_0_sel_rd <= ~inStream_V_keep_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_keep_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_keep_V_0_ack_in == 1'b1) & (inStream_V_keep_V_0_vld_in == 1'b1))) begin
            inStream_V_keep_V_0_sel_wr <= ~inStream_V_keep_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_keep_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_keep_V_0_state == 2'd2) & (inStream_V_keep_V_0_vld_in == 1'b0)) | ((inStream_V_keep_V_0_state == 2'd3) & (inStream_V_keep_V_0_vld_in == 1'b0) & (inStream_V_keep_V_0_ack_out == 1'b1)))) begin
            inStream_V_keep_V_0_state <= 2'd2;
        end else if ((((inStream_V_keep_V_0_state == 2'd3) & (inStream_V_keep_V_0_ack_out == 1'b0) & (inStream_V_keep_V_0_vld_in == 1'b1)) | ((inStream_V_keep_V_0_state == 2'd1) & (inStream_V_keep_V_0_ack_out == 1'b0)))) begin
            inStream_V_keep_V_0_state <= 2'd1;
        end else if ((((inStream_V_keep_V_0_state == 2'd2) & (inStream_V_keep_V_0_vld_in == 1'b1)) | (~((inStream_V_keep_V_0_vld_in == 1'b0) & (inStream_V_keep_V_0_ack_out == 1'b1)) & ~((inStream_V_keep_V_0_ack_out == 1'b0) & (inStream_V_keep_V_0_vld_in == 1'b1)) & (inStream_V_keep_V_0_state == 2'd3)) | ((inStream_V_keep_V_0_state == 2'd1) & (inStream_V_keep_V_0_ack_out == 1'b1)))) begin
            inStream_V_keep_V_0_state <= 2'd3;
        end else begin
            inStream_V_keep_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_last_V_0_ack_out == 1'b1) & (inStream_V_last_V_0_vld_out == 1'b1))) begin
            inStream_V_last_V_0_sel_rd <= ~inStream_V_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_last_V_0_ack_in == 1'b1) & (inStream_V_last_V_0_vld_in == 1'b1))) begin
            inStream_V_last_V_0_sel_wr <= ~inStream_V_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_last_V_0_state == 2'd2) & (inStream_V_last_V_0_vld_in == 1'b0)) | ((inStream_V_last_V_0_state == 2'd3) & (inStream_V_last_V_0_vld_in == 1'b0) & (inStream_V_last_V_0_ack_out == 1'b1)))) begin
            inStream_V_last_V_0_state <= 2'd2;
        end else if ((((inStream_V_last_V_0_state == 2'd1) & (inStream_V_last_V_0_ack_out == 1'b0)) | ((inStream_V_last_V_0_state == 2'd3) & (inStream_V_last_V_0_ack_out == 1'b0) & (inStream_V_last_V_0_vld_in == 1'b1)))) begin
            inStream_V_last_V_0_state <= 2'd1;
        end else if (((~((inStream_V_last_V_0_vld_in == 1'b0) & (inStream_V_last_V_0_ack_out == 1'b1)) & ~((inStream_V_last_V_0_ack_out == 1'b0) & (inStream_V_last_V_0_vld_in == 1'b1)) & (inStream_V_last_V_0_state == 2'd3)) | ((inStream_V_last_V_0_state == 2'd1) & (inStream_V_last_V_0_ack_out == 1'b1)) | ((inStream_V_last_V_0_state == 2'd2) & (inStream_V_last_V_0_vld_in == 1'b1)))) begin
            inStream_V_last_V_0_state <= 2'd3;
        end else begin
            inStream_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_strb_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_strb_V_0_ack_out == 1'b1) & (inStream_V_strb_V_0_vld_out == 1'b1))) begin
            inStream_V_strb_V_0_sel_rd <= ~inStream_V_strb_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_strb_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_strb_V_0_ack_in == 1'b1) & (inStream_V_strb_V_0_vld_in == 1'b1))) begin
            inStream_V_strb_V_0_sel_wr <= ~inStream_V_strb_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_strb_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_strb_V_0_state == 2'd2) & (inStream_V_strb_V_0_vld_in == 1'b0)) | ((inStream_V_strb_V_0_state == 2'd3) & (inStream_V_strb_V_0_vld_in == 1'b0) & (inStream_V_strb_V_0_ack_out == 1'b1)))) begin
            inStream_V_strb_V_0_state <= 2'd2;
        end else if ((((inStream_V_strb_V_0_state == 2'd1) & (inStream_V_strb_V_0_ack_out == 1'b0)) | ((inStream_V_strb_V_0_state == 2'd3) & (inStream_V_strb_V_0_ack_out == 1'b0) & (inStream_V_strb_V_0_vld_in == 1'b1)))) begin
            inStream_V_strb_V_0_state <= 2'd1;
        end else if (((~((inStream_V_strb_V_0_vld_in == 1'b0) & (inStream_V_strb_V_0_ack_out == 1'b1)) & ~((inStream_V_strb_V_0_ack_out == 1'b0) & (inStream_V_strb_V_0_vld_in == 1'b1)) & (inStream_V_strb_V_0_state == 2'd3)) | ((inStream_V_strb_V_0_state == 2'd1) & (inStream_V_strb_V_0_ack_out == 1'b1)) | ((inStream_V_strb_V_0_state == 2'd2) & (inStream_V_strb_V_0_vld_in == 1'b1)))) begin
            inStream_V_strb_V_0_state <= 2'd3;
        end else begin
            inStream_V_strb_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_user_V_0_ack_out == 1'b1) & (inStream_V_user_V_0_vld_out == 1'b1))) begin
            inStream_V_user_V_0_sel_rd <= ~inStream_V_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_user_V_0_ack_in == 1'b1) & (inStream_V_user_V_0_vld_in == 1'b1))) begin
            inStream_V_user_V_0_sel_wr <= ~inStream_V_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_user_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_user_V_0_state == 2'd2) & (inStream_V_user_V_0_vld_in == 1'b0)) | ((inStream_V_user_V_0_state == 2'd3) & (inStream_V_user_V_0_vld_in == 1'b0) & (inStream_V_user_V_0_ack_out == 1'b1)))) begin
            inStream_V_user_V_0_state <= 2'd2;
        end else if ((((inStream_V_user_V_0_state == 2'd1) & (inStream_V_user_V_0_ack_out == 1'b0)) | ((inStream_V_user_V_0_state == 2'd3) & (inStream_V_user_V_0_ack_out == 1'b0) & (inStream_V_user_V_0_vld_in == 1'b1)))) begin
            inStream_V_user_V_0_state <= 2'd1;
        end else if (((~((inStream_V_user_V_0_vld_in == 1'b0) & (inStream_V_user_V_0_ack_out == 1'b1)) & ~((inStream_V_user_V_0_ack_out == 1'b0) & (inStream_V_user_V_0_vld_in == 1'b1)) & (inStream_V_user_V_0_state == 2'd3)) | ((inStream_V_user_V_0_state == 2'd1) & (inStream_V_user_V_0_ack_out == 1'b1)) | ((inStream_V_user_V_0_state == 2'd2) & (inStream_V_user_V_0_vld_in == 1'b1)))) begin
            inStream_V_user_V_0_state <= 2'd3;
        end else begin
            inStream_V_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_data_V_1_ack_out == 1'b1) & (outStream_V_data_V_1_vld_out == 1'b1))) begin
            outStream_V_data_V_1_sel_rd <= ~outStream_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_data_V_1_ack_in == 1'b1) & (outStream_V_data_V_1_vld_in == 1'b1))) begin
            outStream_V_data_V_1_sel_wr <= ~outStream_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_data_V_1_state == 2'd2) & (outStream_V_data_V_1_vld_in == 1'b0)) | ((outStream_V_data_V_1_state == 2'd3) & (outStream_V_data_V_1_vld_in == 1'b0) & (outStream_V_data_V_1_ack_out == 1'b1)))) begin
            outStream_V_data_V_1_state <= 2'd2;
        end else if ((((outStream_V_data_V_1_state == 2'd1) & (outStream_V_data_V_1_ack_out == 1'b0)) | ((outStream_V_data_V_1_state == 2'd3) & (outStream_V_data_V_1_ack_out == 1'b0) & (outStream_V_data_V_1_vld_in == 1'b1)))) begin
            outStream_V_data_V_1_state <= 2'd1;
        end else if (((~((outStream_V_data_V_1_vld_in == 1'b0) & (outStream_V_data_V_1_ack_out == 1'b1)) & ~((outStream_V_data_V_1_ack_out == 1'b0) & (outStream_V_data_V_1_vld_in == 1'b1)) & (outStream_V_data_V_1_state == 2'd3)) | ((outStream_V_data_V_1_state == 2'd1) & (outStream_V_data_V_1_ack_out == 1'b1)) | ((outStream_V_data_V_1_state == 2'd2) & (outStream_V_data_V_1_vld_in == 1'b1)))) begin
            outStream_V_data_V_1_state <= 2'd3;
        end else begin
            outStream_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_dest_V_1_ack_out == 1'b1) & (outStream_V_dest_V_1_vld_out == 1'b1))) begin
            outStream_V_dest_V_1_sel_rd <= ~outStream_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_dest_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_dest_V_1_ack_in == 1'b1) & (outStream_V_dest_V_1_vld_in == 1'b1))) begin
            outStream_V_dest_V_1_sel_wr <= ~outStream_V_dest_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_dest_V_1_state == 2'd2) & (outStream_V_dest_V_1_vld_in == 1'b0)) | ((outStream_V_dest_V_1_state == 2'd3) & (outStream_V_dest_V_1_vld_in == 1'b0) & (outStream_V_dest_V_1_ack_out == 1'b1)))) begin
            outStream_V_dest_V_1_state <= 2'd2;
        end else if ((((outStream_V_dest_V_1_state == 2'd1) & (outStream_V_dest_V_1_ack_out == 1'b0)) | ((outStream_V_dest_V_1_state == 2'd3) & (outStream_V_dest_V_1_ack_out == 1'b0) & (outStream_V_dest_V_1_vld_in == 1'b1)))) begin
            outStream_V_dest_V_1_state <= 2'd1;
        end else if (((~((outStream_V_dest_V_1_vld_in == 1'b0) & (outStream_V_dest_V_1_ack_out == 1'b1)) & ~((outStream_V_dest_V_1_ack_out == 1'b0) & (outStream_V_dest_V_1_vld_in == 1'b1)) & (outStream_V_dest_V_1_state == 2'd3)) | ((outStream_V_dest_V_1_state == 2'd1) & (outStream_V_dest_V_1_ack_out == 1'b1)) | ((outStream_V_dest_V_1_state == 2'd2) & (outStream_V_dest_V_1_vld_in == 1'b1)))) begin
            outStream_V_dest_V_1_state <= 2'd3;
        end else begin
            outStream_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_id_V_1_ack_out == 1'b1) & (outStream_V_id_V_1_vld_out == 1'b1))) begin
            outStream_V_id_V_1_sel_rd <= ~outStream_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_id_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_id_V_1_ack_in == 1'b1) & (outStream_V_id_V_1_vld_in == 1'b1))) begin
            outStream_V_id_V_1_sel_wr <= ~outStream_V_id_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_id_V_1_state == 2'd2) & (outStream_V_id_V_1_vld_in == 1'b0)) | ((outStream_V_id_V_1_state == 2'd3) & (outStream_V_id_V_1_vld_in == 1'b0) & (outStream_V_id_V_1_ack_out == 1'b1)))) begin
            outStream_V_id_V_1_state <= 2'd2;
        end else if ((((outStream_V_id_V_1_state == 2'd1) & (outStream_V_id_V_1_ack_out == 1'b0)) | ((outStream_V_id_V_1_state == 2'd3) & (outStream_V_id_V_1_ack_out == 1'b0) & (outStream_V_id_V_1_vld_in == 1'b1)))) begin
            outStream_V_id_V_1_state <= 2'd1;
        end else if (((~((outStream_V_id_V_1_vld_in == 1'b0) & (outStream_V_id_V_1_ack_out == 1'b1)) & ~((outStream_V_id_V_1_ack_out == 1'b0) & (outStream_V_id_V_1_vld_in == 1'b1)) & (outStream_V_id_V_1_state == 2'd3)) | ((outStream_V_id_V_1_state == 2'd1) & (outStream_V_id_V_1_ack_out == 1'b1)) | ((outStream_V_id_V_1_state == 2'd2) & (outStream_V_id_V_1_vld_in == 1'b1)))) begin
            outStream_V_id_V_1_state <= 2'd3;
        end else begin
            outStream_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_keep_V_1_ack_out == 1'b1) & (outStream_V_keep_V_1_vld_out == 1'b1))) begin
            outStream_V_keep_V_1_sel_rd <= ~outStream_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_keep_V_1_ack_in == 1'b1) & (outStream_V_keep_V_1_vld_in == 1'b1))) begin
            outStream_V_keep_V_1_sel_wr <= ~outStream_V_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_keep_V_1_state == 2'd2) & (outStream_V_keep_V_1_vld_in == 1'b0)) | ((outStream_V_keep_V_1_state == 2'd3) & (outStream_V_keep_V_1_vld_in == 1'b0) & (outStream_V_keep_V_1_ack_out == 1'b1)))) begin
            outStream_V_keep_V_1_state <= 2'd2;
        end else if ((((outStream_V_keep_V_1_state == 2'd1) & (outStream_V_keep_V_1_ack_out == 1'b0)) | ((outStream_V_keep_V_1_state == 2'd3) & (outStream_V_keep_V_1_ack_out == 1'b0) & (outStream_V_keep_V_1_vld_in == 1'b1)))) begin
            outStream_V_keep_V_1_state <= 2'd1;
        end else if (((~((outStream_V_keep_V_1_vld_in == 1'b0) & (outStream_V_keep_V_1_ack_out == 1'b1)) & ~((outStream_V_keep_V_1_ack_out == 1'b0) & (outStream_V_keep_V_1_vld_in == 1'b1)) & (outStream_V_keep_V_1_state == 2'd3)) | ((outStream_V_keep_V_1_state == 2'd1) & (outStream_V_keep_V_1_ack_out == 1'b1)) | ((outStream_V_keep_V_1_state == 2'd2) & (outStream_V_keep_V_1_vld_in == 1'b1)))) begin
            outStream_V_keep_V_1_state <= 2'd3;
        end else begin
            outStream_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_last_V_1_ack_out == 1'b1) & (outStream_V_last_V_1_vld_out == 1'b1))) begin
            outStream_V_last_V_1_sel_rd <= ~outStream_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_last_V_1_ack_in == 1'b1) & (outStream_V_last_V_1_vld_in == 1'b1))) begin
            outStream_V_last_V_1_sel_wr <= ~outStream_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_last_V_1_state == 2'd2) & (outStream_V_last_V_1_vld_in == 1'b0)) | ((outStream_V_last_V_1_state == 2'd3) & (outStream_V_last_V_1_vld_in == 1'b0) & (outStream_V_last_V_1_ack_out == 1'b1)))) begin
            outStream_V_last_V_1_state <= 2'd2;
        end else if ((((outStream_V_last_V_1_state == 2'd1) & (outStream_V_last_V_1_ack_out == 1'b0)) | ((outStream_V_last_V_1_state == 2'd3) & (outStream_V_last_V_1_ack_out == 1'b0) & (outStream_V_last_V_1_vld_in == 1'b1)))) begin
            outStream_V_last_V_1_state <= 2'd1;
        end else if (((~((outStream_V_last_V_1_vld_in == 1'b0) & (outStream_V_last_V_1_ack_out == 1'b1)) & ~((outStream_V_last_V_1_ack_out == 1'b0) & (outStream_V_last_V_1_vld_in == 1'b1)) & (outStream_V_last_V_1_state == 2'd3)) | ((outStream_V_last_V_1_state == 2'd1) & (outStream_V_last_V_1_ack_out == 1'b1)) | ((outStream_V_last_V_1_state == 2'd2) & (outStream_V_last_V_1_vld_in == 1'b1)))) begin
            outStream_V_last_V_1_state <= 2'd3;
        end else begin
            outStream_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_strb_V_1_ack_out == 1'b1) & (outStream_V_strb_V_1_vld_out == 1'b1))) begin
            outStream_V_strb_V_1_sel_rd <= ~outStream_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_strb_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_strb_V_1_ack_in == 1'b1) & (outStream_V_strb_V_1_vld_in == 1'b1))) begin
            outStream_V_strb_V_1_sel_wr <= ~outStream_V_strb_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_strb_V_1_state == 2'd2) & (outStream_V_strb_V_1_vld_in == 1'b0)) | ((outStream_V_strb_V_1_state == 2'd3) & (outStream_V_strb_V_1_vld_in == 1'b0) & (outStream_V_strb_V_1_ack_out == 1'b1)))) begin
            outStream_V_strb_V_1_state <= 2'd2;
        end else if ((((outStream_V_strb_V_1_state == 2'd1) & (outStream_V_strb_V_1_ack_out == 1'b0)) | ((outStream_V_strb_V_1_state == 2'd3) & (outStream_V_strb_V_1_ack_out == 1'b0) & (outStream_V_strb_V_1_vld_in == 1'b1)))) begin
            outStream_V_strb_V_1_state <= 2'd1;
        end else if (((~((outStream_V_strb_V_1_vld_in == 1'b0) & (outStream_V_strb_V_1_ack_out == 1'b1)) & ~((outStream_V_strb_V_1_ack_out == 1'b0) & (outStream_V_strb_V_1_vld_in == 1'b1)) & (outStream_V_strb_V_1_state == 2'd3)) | ((outStream_V_strb_V_1_state == 2'd1) & (outStream_V_strb_V_1_ack_out == 1'b1)) | ((outStream_V_strb_V_1_state == 2'd2) & (outStream_V_strb_V_1_vld_in == 1'b1)))) begin
            outStream_V_strb_V_1_state <= 2'd3;
        end else begin
            outStream_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_user_V_1_ack_out == 1'b1) & (outStream_V_user_V_1_vld_out == 1'b1))) begin
            outStream_V_user_V_1_sel_rd <= ~outStream_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_user_V_1_ack_in == 1'b1) & (outStream_V_user_V_1_vld_in == 1'b1))) begin
            outStream_V_user_V_1_sel_wr <= ~outStream_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_user_V_1_state == 2'd2) & (outStream_V_user_V_1_vld_in == 1'b0)) | ((outStream_V_user_V_1_state == 2'd3) & (outStream_V_user_V_1_vld_in == 1'b0) & (outStream_V_user_V_1_ack_out == 1'b1)))) begin
            outStream_V_user_V_1_state <= 2'd2;
        end else if ((((outStream_V_user_V_1_state == 2'd1) & (outStream_V_user_V_1_ack_out == 1'b0)) | ((outStream_V_user_V_1_state == 2'd3) & (outStream_V_user_V_1_ack_out == 1'b0) & (outStream_V_user_V_1_vld_in == 1'b1)))) begin
            outStream_V_user_V_1_state <= 2'd1;
        end else if (((~((outStream_V_user_V_1_vld_in == 1'b0) & (outStream_V_user_V_1_ack_out == 1'b1)) & ~((outStream_V_user_V_1_ack_out == 1'b0) & (outStream_V_user_V_1_vld_in == 1'b1)) & (outStream_V_user_V_1_state == 2'd3)) | ((outStream_V_user_V_1_state == 2'd1) & (outStream_V_user_V_1_ack_out == 1'b1)) | ((outStream_V_user_V_1_state == 2'd2) & (outStream_V_user_V_1_vld_in == 1'b1)))) begin
            outStream_V_user_V_1_state <= 2'd3;
        end else begin
            outStream_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond1_fu_652_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        columnCnt_reg_426 <= columnCnt_2_fu_788_p3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        columnCnt_reg_426 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1151)) begin
        if (((tmp_18_reg_3174 == 1'd1) & (brmerge1382_demorgan_fu_1154_p2 == 1'd1))) begin
            detections2_0 <= tmp_29_reg_3457;
        end else if ((tmp_18_reg_3174 == 1'd0)) begin
            detections2_0 <= 1'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1151)) begin
        if (((tmp_19_reg_3180 == 1'd1) & (brmerge1385_demorgan_fu_1170_p2 == 1'd1))) begin
            detections2_1 <= tmp_29_reg_3457;
        end else if ((tmp_19_reg_3180 == 1'd0)) begin
            detections2_1 <= 1'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1151)) begin
        if (((tmp_23_reg_3186 == 1'd1) & (brmerge1388_demorgan_fu_1186_p2 == 1'd1))) begin
            detections2_2 <= tmp_29_reg_3457;
        end else if ((tmp_23_reg_3186 == 1'd0)) begin
            detections2_2 <= 1'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1151)) begin
        if (((tmp_24_reg_3198 == 1'd1) & (brmerge1391_demorgan_fu_1202_p2 == 1'd1))) begin
            detections2_3 <= tmp_29_reg_3457;
        end else if ((tmp_24_reg_3198 == 1'd0)) begin
            detections2_3 <= 1'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1151)) begin
        if (((tmp_25_reg_3214 == 1'd1) & (brmerge1394_demorgan_fu_1218_p2 == 1'd1))) begin
            detections2_4 <= tmp_29_reg_3457;
        end else if ((tmp_25_reg_3214 == 1'd0)) begin
            detections2_4 <= 1'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1151)) begin
        if (((tmp_26_reg_3238 == 1'd1) & (brmerge1397_demorgan_fu_1234_p2 == 1'd1))) begin
            detections2_5 <= tmp_29_reg_3457;
        end else if ((tmp_26_reg_3238 == 1'd0)) begin
            detections2_5 <= 1'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1151)) begin
        if (((tmp_30_reg_3278 == 1'd1) & (brmerge1400_demorgan_fu_1250_p2 == 1'd1))) begin
            detections2_6 <= tmp_29_reg_3457;
        end else if ((tmp_30_reg_3278 == 1'd0)) begin
            detections2_6 <= 1'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1151)) begin
        if (((tmp_18_reg_3174 == 1'd1) & (brmerge1368_demorgan_fu_1042_p2 == 1'd1))) begin
            detections_0 <= tmp_29_reg_3457;
        end else if ((tmp_18_reg_3174 == 1'd0)) begin
            detections_0 <= 1'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1151)) begin
        if (((tmp_19_reg_3180 == 1'd1) & (brmerge1370_demorgan_fu_1058_p2 == 1'd1))) begin
            detections_1 <= tmp_29_reg_3457;
        end else if ((tmp_19_reg_3180 == 1'd0)) begin
            detections_1 <= 1'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1151)) begin
        if (((tmp_23_reg_3186 == 1'd1) & (brmerge1372_demorgan_fu_1074_p2 == 1'd1))) begin
            detections_2 <= tmp_29_reg_3457;
        end else if ((tmp_23_reg_3186 == 1'd0)) begin
            detections_2 <= 1'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1151)) begin
        if (((tmp_24_reg_3198 == 1'd1) & (brmerge1374_demorgan_fu_1090_p2 == 1'd1))) begin
            detections_3 <= tmp_29_reg_3457;
        end else if ((tmp_24_reg_3198 == 1'd0)) begin
            detections_3 <= 1'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1151)) begin
        if (((tmp_25_reg_3214 == 1'd1) & (brmerge1376_demorgan_fu_1106_p2 == 1'd1))) begin
            detections_4 <= tmp_29_reg_3457;
        end else if ((tmp_25_reg_3214 == 1'd0)) begin
            detections_4 <= 1'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1151)) begin
        if (((tmp_26_reg_3238 == 1'd1) & (brmerge1378_demorgan_fu_1122_p2 == 1'd1))) begin
            detections_5 <= tmp_29_reg_3457;
        end else if ((tmp_26_reg_3238 == 1'd0)) begin
            detections_5 <= 1'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1151)) begin
        if (((tmp_30_reg_3278 == 1'd1) & (brmerge1380_demorgan_fu_1138_p2 == 1'd1))) begin
            detections_6 <= tmp_29_reg_3457;
        end else if ((tmp_30_reg_3278 == 1'd0)) begin
            detections_6 <= 1'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond1_fu_652_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_437 <= i_1_fu_658_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        i_reg_437 <= 20'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond1_fu_652_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rowCnt_reg_415 <= rowCnt_2_fu_780_p3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        rowCnt_reg_415 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond1_reg_3378 <= exitcond1_fu_652_p2;
        exitcond1_reg_3378_pp0_iter1_reg <= exitcond1_reg_3378;
        tmp_16_reg_3433_pp0_iter1_reg <= tmp_16_reg_3433;
        tmp_17_reg_3445_pp0_iter1_reg <= tmp_17_reg_3445;
        tmp_data_V_1_reg_3387_pp0_iter1_reg <= tmp_data_V_1_reg_3387;
        tmp_dest_V_reg_3417_pp0_iter1_reg <= tmp_dest_V_reg_3417;
        tmp_id_V_reg_3412_pp0_iter1_reg <= tmp_id_V_reg_3412;
        tmp_keep_V_reg_3392_pp0_iter1_reg <= tmp_keep_V_reg_3392;
        tmp_last_V_reg_3407_pp0_iter1_reg <= tmp_last_V_reg_3407;
        tmp_strb_V_reg_3397_pp0_iter1_reg <= tmp_strb_V_reg_3397;
        tmp_user_V_reg_3402_pp0_iter1_reg <= tmp_user_V_reg_3402;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        exitcond1_reg_3378_pp0_iter2_reg <= exitcond1_reg_3378_pp0_iter1_reg;
        exitcond1_reg_3378_pp0_iter3_reg <= exitcond1_reg_3378_pp0_iter2_reg;
        sel_tmp4_reg_3507_pp0_iter2_reg <= sel_tmp4_reg_3507;
        tmp_16_reg_3433_pp0_iter2_reg <= tmp_16_reg_3433_pp0_iter1_reg;
        tmp_17_reg_3445_pp0_iter2_reg <= tmp_17_reg_3445_pp0_iter1_reg;
        tmp_data_V_1_reg_3387_pp0_iter2_reg <= tmp_data_V_1_reg_3387_pp0_iter1_reg;
        tmp_dest_V_reg_3417_pp0_iter2_reg <= tmp_dest_V_reg_3417_pp0_iter1_reg;
        tmp_id_V_reg_3412_pp0_iter2_reg <= tmp_id_V_reg_3412_pp0_iter1_reg;
        tmp_keep_V_reg_3392_pp0_iter2_reg <= tmp_keep_V_reg_3392_pp0_iter1_reg;
        tmp_last_V_reg_3407_pp0_iter2_reg <= tmp_last_V_reg_3407_pp0_iter1_reg;
        tmp_strb_V_reg_3397_pp0_iter2_reg <= tmp_strb_V_reg_3397_pp0_iter1_reg;
        tmp_user_V_reg_3402_pp0_iter2_reg <= tmp_user_V_reg_3402_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond1_fu_652_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_op_assign_reg_3422 <= i_op_assign_fu_706_p3;
        tmp_16_reg_3433 <= tmp_16_fu_714_p2;
        tmp_17_reg_3445 <= tmp_17_fu_719_p2;
        tmp_29_reg_3457 <= tmp_29_fu_762_p2;
        tmp_data_V_1_reg_3387 <= inStream_V_data_V_0_data_out;
        tmp_dest_V_reg_3417 <= inStream_V_dest_V_0_data_out;
        tmp_id_V_reg_3412 <= inStream_V_id_V_0_data_out;
        tmp_keep_V_reg_3392 <= inStream_V_keep_V_0_data_out;
        tmp_last_V_reg_3407 <= inStream_V_last_V_0_data_out;
        tmp_strb_V_reg_3397 <= inStream_V_strb_V_0_data_out;
        tmp_user_V_reg_3402 <= inStream_V_user_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        icmp1_reg_3353 <= icmp1_fu_582_p2;
        icmp2_reg_3358 <= icmp2_fu_598_p2;
        icmp3_reg_3363 <= icmp3_fu_614_p2;
        icmp4_reg_3368 <= icmp4_fu_630_p2;
        icmp5_reg_3373 <= icmp5_fu_646_p2;
        icmp_reg_3348 <= icmp_fu_566_p2;
        ret_V_cast_reg_3343 <= ret_V_cast_fu_552_p1;
        rev1_reg_3219 <= rev1_fu_500_p2;
        rev2_reg_3243 <= rev2_fu_514_p2;
        rev3_reg_3283 <= rev3_fu_528_p2;
        rev9_reg_3191 <= rev9_fu_472_p2;
        rev_reg_3203 <= rev_fu_486_p2;
        tmp_15_reg_3338 <= tmp_15_fu_538_p1;
        tmp_18_reg_3174 <= enable_V[32'd1];
        tmp_19_reg_3180 <= enable_V[32'd2];
        tmp_23_reg_3186 <= enable_V[32'd3];
        tmp_24_reg_3198 <= enable_V[32'd4];
        tmp_25_reg_3214 <= enable_V[32'd5];
        tmp_26_reg_3238 <= enable_V[32'd6];
        tmp_30_reg_3278 <= enable_V[32'd7];
        tmp_31_reg_3333 <= tmp_31_fu_534_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_data_V_0_load_A == 1'b1)) begin
        inStream_V_data_V_0_payload_A <= inStream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_data_V_0_load_B == 1'b1)) begin
        inStream_V_data_V_0_payload_B <= inStream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_dest_V_0_load_A == 1'b1)) begin
        inStream_V_dest_V_0_payload_A <= inStream_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_dest_V_0_load_B == 1'b1)) begin
        inStream_V_dest_V_0_payload_B <= inStream_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_id_V_0_load_A == 1'b1)) begin
        inStream_V_id_V_0_payload_A <= inStream_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_id_V_0_load_B == 1'b1)) begin
        inStream_V_id_V_0_payload_B <= inStream_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_keep_V_0_load_A == 1'b1)) begin
        inStream_V_keep_V_0_payload_A <= inStream_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_keep_V_0_load_B == 1'b1)) begin
        inStream_V_keep_V_0_payload_B <= inStream_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_last_V_0_load_A == 1'b1)) begin
        inStream_V_last_V_0_payload_A <= inStream_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_last_V_0_load_B == 1'b1)) begin
        inStream_V_last_V_0_payload_B <= inStream_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_strb_V_0_load_A == 1'b1)) begin
        inStream_V_strb_V_0_payload_A <= inStream_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_strb_V_0_load_B == 1'b1)) begin
        inStream_V_strb_V_0_payload_B <= inStream_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_user_V_0_load_A == 1'b1)) begin
        inStream_V_user_V_0_payload_A <= inStream_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_user_V_0_load_B == 1'b1)) begin
        inStream_V_user_V_0_payload_B <= inStream_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_data_V_1_load_A == 1'b1)) begin
        outStream_V_data_V_1_payload_A <= tmp_data_V_fu_3166_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_data_V_1_load_B == 1'b1)) begin
        outStream_V_data_V_1_payload_B <= tmp_data_V_fu_3166_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_dest_V_1_load_A == 1'b1)) begin
        outStream_V_dest_V_1_payload_A <= tmp_dest_V_reg_3417_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_dest_V_1_load_B == 1'b1)) begin
        outStream_V_dest_V_1_payload_B <= tmp_dest_V_reg_3417_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_id_V_1_load_A == 1'b1)) begin
        outStream_V_id_V_1_payload_A <= tmp_id_V_reg_3412_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_id_V_1_load_B == 1'b1)) begin
        outStream_V_id_V_1_payload_B <= tmp_id_V_reg_3412_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_keep_V_1_load_A == 1'b1)) begin
        outStream_V_keep_V_1_payload_A <= tmp_keep_V_reg_3392_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_keep_V_1_load_B == 1'b1)) begin
        outStream_V_keep_V_1_payload_B <= tmp_keep_V_reg_3392_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_last_V_1_load_A == 1'b1)) begin
        outStream_V_last_V_1_payload_A <= tmp_last_V_reg_3407_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_last_V_1_load_B == 1'b1)) begin
        outStream_V_last_V_1_payload_B <= tmp_last_V_reg_3407_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_strb_V_1_load_A == 1'b1)) begin
        outStream_V_strb_V_1_payload_A <= tmp_strb_V_reg_3397_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_strb_V_1_load_B == 1'b1)) begin
        outStream_V_strb_V_1_payload_B <= tmp_strb_V_reg_3397_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_user_V_1_load_A == 1'b1)) begin
        outStream_V_user_V_1_payload_A <= tmp_user_V_reg_3402_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_user_V_1_load_B == 1'b1)) begin
        outStream_V_user_V_1_payload_B <= tmp_user_V_reg_3402_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond1_reg_3378 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sel_tmp12_reg_3512 <= sel_tmp12_fu_930_p2;
        sel_tmp15_reg_3531 <= sel_tmp15_fu_936_p2;
        sel_tmp16_reg_3540 <= sel_tmp16_fu_942_p2;
        sel_tmp21_reg_3546 <= sel_tmp21_fu_958_p2;
        sel_tmp25_reg_3552 <= sel_tmp25_fu_974_p2;
        sel_tmp30_reg_3558 <= sel_tmp30_fu_990_p2;
        sel_tmp45_reg_3564 <= sel_tmp45_fu_995_p2;
        sel_tmp4_reg_3507 <= sel_tmp4_fu_924_p2;
        sel_tmp56_reg_3570 <= sel_tmp56_fu_1001_p2;
        sel_tmp618_demorgan_reg_3588 <= sel_tmp618_demorgan_fu_1030_p2;
        sel_tmp68_reg_3576 <= sel_tmp68_fu_1007_p2;
        sel_tmp73_reg_3582 <= sel_tmp73_fu_1025_p2;
        tmp_10_reg_3490 <= tmp_10_fu_836_p2;
        tmp_12_reg_3495 <= tmp_12_fu_845_p2;
        tmp_14_reg_3501 <= tmp_14_fu_854_p2;
        tmp_9_reg_3485 <= tmp_9_fu_827_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond1_reg_3378_pp0_iter1_reg == 1'd0))) begin
        tmp109_reg_3676 <= tmp109_fu_2927_p2;
        tmp112_reg_3681 <= tmp112_fu_2945_p2;
        tmp115_reg_3686 <= tmp115_fu_2968_p2;
        tmp122_reg_3691 <= tmp122_fu_3016_p2;
        tmp34_reg_3636 <= tmp34_fu_2439_p2;
        tmp49_reg_3641 <= tmp49_fu_2534_p2;
        tmp56_reg_3646 <= tmp56_fu_2576_p2;
        tmp62_reg_3651 <= tmp62_fu_2628_p2;
        tmp71_reg_3656 <= tmp71_fu_2682_p2;
        tmp78_reg_3661 <= tmp78_fu_2724_p2;
        tmp86_reg_3666 <= tmp86_fu_2772_p2;
        tmp93_reg_3671 <= tmp93_fu_2814_p2;
    end
end

always @ (*) begin
    if ((exitcond1_fu_652_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (exitcond1_fu_652_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inStream_TDATA_blk_n = inStream_V_data_V_0_state[1'd0];
    end else begin
        inStream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond1_fu_652_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inStream_V_data_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_data_V_0_sel == 1'b1)) begin
        inStream_V_data_V_0_data_out = inStream_V_data_V_0_payload_B;
    end else begin
        inStream_V_data_V_0_data_out = inStream_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond1_fu_652_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inStream_V_dest_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_dest_V_0_sel == 1'b1)) begin
        inStream_V_dest_V_0_data_out = inStream_V_dest_V_0_payload_B;
    end else begin
        inStream_V_dest_V_0_data_out = inStream_V_dest_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond1_fu_652_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inStream_V_id_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_id_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_id_V_0_sel == 1'b1)) begin
        inStream_V_id_V_0_data_out = inStream_V_id_V_0_payload_B;
    end else begin
        inStream_V_id_V_0_data_out = inStream_V_id_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond1_fu_652_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inStream_V_keep_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_keep_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_keep_V_0_sel == 1'b1)) begin
        inStream_V_keep_V_0_data_out = inStream_V_keep_V_0_payload_B;
    end else begin
        inStream_V_keep_V_0_data_out = inStream_V_keep_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond1_fu_652_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inStream_V_last_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_last_V_0_sel == 1'b1)) begin
        inStream_V_last_V_0_data_out = inStream_V_last_V_0_payload_B;
    end else begin
        inStream_V_last_V_0_data_out = inStream_V_last_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond1_fu_652_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inStream_V_strb_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_strb_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_strb_V_0_sel == 1'b1)) begin
        inStream_V_strb_V_0_data_out = inStream_V_strb_V_0_payload_B;
    end else begin
        inStream_V_strb_V_0_data_out = inStream_V_strb_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond1_fu_652_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inStream_V_user_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_user_V_0_sel == 1'b1)) begin
        inStream_V_user_V_0_data_out = inStream_V_user_V_0_payload_B;
    end else begin
        inStream_V_user_V_0_data_out = inStream_V_user_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (exitcond1_reg_3378_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (exitcond1_reg_3378_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        outStream_TDATA_blk_n = outStream_V_data_V_1_state[1'd1];
    end else begin
        outStream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((outStream_V_data_V_1_sel == 1'b1)) begin
        outStream_V_data_V_1_data_out = outStream_V_data_V_1_payload_B;
    end else begin
        outStream_V_data_V_1_data_out = outStream_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond1_reg_3378_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        outStream_V_data_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((outStream_V_dest_V_1_sel == 1'b1)) begin
        outStream_V_dest_V_1_data_out = outStream_V_dest_V_1_payload_B;
    end else begin
        outStream_V_dest_V_1_data_out = outStream_V_dest_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond1_reg_3378_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        outStream_V_dest_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((outStream_V_id_V_1_sel == 1'b1)) begin
        outStream_V_id_V_1_data_out = outStream_V_id_V_1_payload_B;
    end else begin
        outStream_V_id_V_1_data_out = outStream_V_id_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond1_reg_3378_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        outStream_V_id_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((outStream_V_keep_V_1_sel == 1'b1)) begin
        outStream_V_keep_V_1_data_out = outStream_V_keep_V_1_payload_B;
    end else begin
        outStream_V_keep_V_1_data_out = outStream_V_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond1_reg_3378_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        outStream_V_keep_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((outStream_V_last_V_1_sel == 1'b1)) begin
        outStream_V_last_V_1_data_out = outStream_V_last_V_1_payload_B;
    end else begin
        outStream_V_last_V_1_data_out = outStream_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond1_reg_3378_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        outStream_V_last_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((outStream_V_strb_V_1_sel == 1'b1)) begin
        outStream_V_strb_V_1_data_out = outStream_V_strb_V_1_payload_B;
    end else begin
        outStream_V_strb_V_1_data_out = outStream_V_strb_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond1_reg_3378_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        outStream_V_strb_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((outStream_V_user_V_1_sel == 1'b1)) begin
        outStream_V_user_V_1_data_out = outStream_V_user_V_1_payload_B;
    end else begin
        outStream_V_user_V_1_data_out = outStream_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond1_reg_3378_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        outStream_V_user_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond1_fu_652_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((exitcond1_fu_652_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            if ((~((outStream_V_dest_V_1_ack_in == 1'b0) | (outStream_V_id_V_1_ack_in == 1'b0) | (outStream_V_last_V_1_ack_in == 1'b0) | (outStream_V_user_V_1_ack_in == 1'b0) | (outStream_V_strb_V_1_ack_in == 1'b0) | (outStream_V_keep_V_1_ack_in == 1'b0) | (outStream_V_data_V_1_ack_in == 1'b0)) & (outStream_V_dest_V_1_state[1'd0] == 1'b0) & (outStream_V_id_V_1_state[1'd0] == 1'b0) & (outStream_V_last_V_1_state[1'd0] == 1'b0) & (outStream_V_user_V_1_state[1'd0] == 1'b0) & (outStream_V_strb_V_1_state[1'd0] == 1'b0) & (outStream_V_keep_V_1_state[1'd0] == 1'b0) & (outStream_V_data_V_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((exitcond1_fu_652_p2 == 1'd0) & (inStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state6_io) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((exitcond1_fu_652_p2 == 1'd0) & (inStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state6_io) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((exitcond1_fu_652_p2 == 1'd0) & (inStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((exitcond1_fu_652_p2 == 1'd0) & (inStream_V_data_V_0_vld_out == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = ((exitcond1_reg_3378_pp0_iter2_reg == 1'd0) & (outStream_V_data_V_1_ack_in == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_io = ((exitcond1_reg_3378_pp0_iter3_reg == 1'd0) & (outStream_V_data_V_1_ack_in == 1'b0));
end

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7 = ((outStream_V_dest_V_1_ack_in == 1'b0) | (outStream_V_id_V_1_ack_in == 1'b0) | (outStream_V_last_V_1_ack_in == 1'b0) | (outStream_V_user_V_1_ack_in == 1'b0) | (outStream_V_strb_V_1_ack_in == 1'b0) | (outStream_V_keep_V_1_ack_in == 1'b0) | (outStream_V_data_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_condition_1151 = ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign brmerge1368_demorgan_fu_1042_p2 = (tmp_3_fu_800_p2 & tmp_16_reg_3433);

assign brmerge1370_demorgan_fu_1058_p2 = (tmp_5_fu_809_p2 & tmp_16_reg_3433);

assign brmerge1372_demorgan_fu_1074_p2 = (tmp_7_fu_818_p2 & tmp_16_reg_3433);

assign brmerge1374_demorgan_fu_1090_p2 = (tmp_9_fu_827_p2 & tmp_16_reg_3433);

assign brmerge1376_demorgan_fu_1106_p2 = (tmp_16_reg_3433 & tmp_10_fu_836_p2);

assign brmerge1378_demorgan_fu_1122_p2 = (tmp_16_reg_3433 & tmp_12_fu_845_p2);

assign brmerge1380_demorgan_fu_1138_p2 = (tmp_16_reg_3433 & tmp_14_fu_854_p2);

assign brmerge1382_demorgan_fu_1154_p2 = (tmp_3_fu_800_p2 & tmp_17_reg_3445);

assign brmerge1385_demorgan_fu_1170_p2 = (tmp_5_fu_809_p2 & tmp_17_reg_3445);

assign brmerge1388_demorgan_fu_1186_p2 = (tmp_7_fu_818_p2 & tmp_17_reg_3445);

assign brmerge1391_demorgan_fu_1202_p2 = (tmp_9_fu_827_p2 & tmp_17_reg_3445);

assign brmerge1394_demorgan_fu_1218_p2 = (tmp_17_reg_3445 & tmp_10_fu_836_p2);

assign brmerge1397_demorgan_fu_1234_p2 = (tmp_17_reg_3445 & tmp_12_fu_845_p2);

assign brmerge1400_demorgan_fu_1250_p2 = (tmp_17_reg_3445 & tmp_14_fu_854_p2);

assign columnCnt_1_fu_774_p2 = (i_op_assign_fu_706_p3 + 32'd1);

assign columnCnt_2_fu_788_p3 = ((inStream_V_last_V_0_data_out[0:0] === 1'b1) ? 32'd0 : columnCnt_1_fu_774_p2);

assign exitcond1_fu_652_p2 = ((i_reg_437 == 20'd921600) ? 1'b1 : 1'b0);

assign i_1_fu_658_p2 = (i_reg_437 + 20'd1);

assign i_op_assign_1_fu_698_p3 = ((tmp_1_fu_692_p2[0:0] === 1'b1) ? 32'd0 : rowCnt_reg_415);

assign i_op_assign_fu_706_p3 = ((tmp_1_fu_692_p2[0:0] === 1'b1) ? 32'd0 : columnCnt_reg_426);

assign icmp1_fu_582_p2 = ((tmp_33_fu_572_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp2_fu_598_p2 = ((tmp_34_fu_588_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp3_fu_614_p2 = ((tmp_35_fu_604_p4 == 4'd0) ? 1'b1 : 1'b0);

assign icmp4_fu_630_p2 = ((tmp_36_fu_620_p4 == 3'd0) ? 1'b1 : 1'b0);

assign icmp5_fu_646_p2 = ((tmp_37_fu_636_p4 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_fu_566_p2 = ((tmp_32_fu_556_p4 == 7'd0) ? 1'b1 : 1'b0);

assign inStream_TREADY = inStream_V_dest_V_0_state[1'd1];

assign inStream_V_data_V_0_ack_in = inStream_V_data_V_0_state[1'd1];

assign inStream_V_data_V_0_load_A = (inStream_V_data_V_0_state_cmp_full & ~inStream_V_data_V_0_sel_wr);

assign inStream_V_data_V_0_load_B = (inStream_V_data_V_0_state_cmp_full & inStream_V_data_V_0_sel_wr);

assign inStream_V_data_V_0_sel = inStream_V_data_V_0_sel_rd;

assign inStream_V_data_V_0_state_cmp_full = ((inStream_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_data_V_0_vld_in = inStream_TVALID;

assign inStream_V_data_V_0_vld_out = inStream_V_data_V_0_state[1'd0];

assign inStream_V_dest_V_0_ack_in = inStream_V_dest_V_0_state[1'd1];

assign inStream_V_dest_V_0_load_A = (inStream_V_dest_V_0_state_cmp_full & ~inStream_V_dest_V_0_sel_wr);

assign inStream_V_dest_V_0_load_B = (inStream_V_dest_V_0_state_cmp_full & inStream_V_dest_V_0_sel_wr);

assign inStream_V_dest_V_0_sel = inStream_V_dest_V_0_sel_rd;

assign inStream_V_dest_V_0_state_cmp_full = ((inStream_V_dest_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_dest_V_0_vld_in = inStream_TVALID;

assign inStream_V_dest_V_0_vld_out = inStream_V_dest_V_0_state[1'd0];

assign inStream_V_id_V_0_ack_in = inStream_V_id_V_0_state[1'd1];

assign inStream_V_id_V_0_load_A = (inStream_V_id_V_0_state_cmp_full & ~inStream_V_id_V_0_sel_wr);

assign inStream_V_id_V_0_load_B = (inStream_V_id_V_0_state_cmp_full & inStream_V_id_V_0_sel_wr);

assign inStream_V_id_V_0_sel = inStream_V_id_V_0_sel_rd;

assign inStream_V_id_V_0_state_cmp_full = ((inStream_V_id_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_id_V_0_vld_in = inStream_TVALID;

assign inStream_V_id_V_0_vld_out = inStream_V_id_V_0_state[1'd0];

assign inStream_V_keep_V_0_ack_in = inStream_V_keep_V_0_state[1'd1];

assign inStream_V_keep_V_0_load_A = (inStream_V_keep_V_0_state_cmp_full & ~inStream_V_keep_V_0_sel_wr);

assign inStream_V_keep_V_0_load_B = (inStream_V_keep_V_0_state_cmp_full & inStream_V_keep_V_0_sel_wr);

assign inStream_V_keep_V_0_sel = inStream_V_keep_V_0_sel_rd;

assign inStream_V_keep_V_0_state_cmp_full = ((inStream_V_keep_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_keep_V_0_vld_in = inStream_TVALID;

assign inStream_V_keep_V_0_vld_out = inStream_V_keep_V_0_state[1'd0];

assign inStream_V_last_V_0_ack_in = inStream_V_last_V_0_state[1'd1];

assign inStream_V_last_V_0_load_A = (inStream_V_last_V_0_state_cmp_full & ~inStream_V_last_V_0_sel_wr);

assign inStream_V_last_V_0_load_B = (inStream_V_last_V_0_state_cmp_full & inStream_V_last_V_0_sel_wr);

assign inStream_V_last_V_0_sel = inStream_V_last_V_0_sel_rd;

assign inStream_V_last_V_0_state_cmp_full = ((inStream_V_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_last_V_0_vld_in = inStream_TVALID;

assign inStream_V_last_V_0_vld_out = inStream_V_last_V_0_state[1'd0];

assign inStream_V_strb_V_0_ack_in = inStream_V_strb_V_0_state[1'd1];

assign inStream_V_strb_V_0_load_A = (inStream_V_strb_V_0_state_cmp_full & ~inStream_V_strb_V_0_sel_wr);

assign inStream_V_strb_V_0_load_B = (inStream_V_strb_V_0_state_cmp_full & inStream_V_strb_V_0_sel_wr);

assign inStream_V_strb_V_0_sel = inStream_V_strb_V_0_sel_rd;

assign inStream_V_strb_V_0_state_cmp_full = ((inStream_V_strb_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_strb_V_0_vld_in = inStream_TVALID;

assign inStream_V_strb_V_0_vld_out = inStream_V_strb_V_0_state[1'd0];

assign inStream_V_user_V_0_ack_in = inStream_V_user_V_0_state[1'd1];

assign inStream_V_user_V_0_load_A = (inStream_V_user_V_0_state_cmp_full & ~inStream_V_user_V_0_sel_wr);

assign inStream_V_user_V_0_load_B = (inStream_V_user_V_0_state_cmp_full & inStream_V_user_V_0_sel_wr);

assign inStream_V_user_V_0_sel = inStream_V_user_V_0_sel_rd;

assign inStream_V_user_V_0_state_cmp_full = ((inStream_V_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_user_V_0_vld_in = inStream_TVALID;

assign inStream_V_user_V_0_vld_out = inStream_V_user_V_0_state[1'd0];

assign lhs_V_3_cast_fu_740_p4 = {{inStream_V_data_V_0_data_out[15:8]}};

assign lhs_V_cast_fu_542_p0 = horizontalPos_V;

assign lhs_V_cast_fu_542_p1 = lhs_V_cast_fu_542_p0;

assign or_cond_fu_3092_p2 = (tmp_17_reg_3445_pp0_iter2_reg | tmp_16_reg_3433_pp0_iter2_reg);

assign out2_0_V = detections2_0;

assign out2_1_V = detections2_1;

assign out2_2_V = detections2_2;

assign out2_3_V = detections2_3;

assign out2_4_V = detections2_4;

assign out2_5_V = detections2_5;

assign out2_6_V = detections2_6;

assign outStream_TDATA = outStream_V_data_V_1_data_out;

assign outStream_TDEST = outStream_V_dest_V_1_data_out;

assign outStream_TID = outStream_V_id_V_1_data_out;

assign outStream_TKEEP = outStream_V_keep_V_1_data_out;

assign outStream_TLAST = outStream_V_last_V_1_data_out;

assign outStream_TSTRB = outStream_V_strb_V_1_data_out;

assign outStream_TUSER = outStream_V_user_V_1_data_out;

assign outStream_TVALID = outStream_V_dest_V_1_state[1'd0];

assign outStream_V_data_V_1_ack_in = outStream_V_data_V_1_state[1'd1];

assign outStream_V_data_V_1_ack_out = outStream_TREADY;

assign outStream_V_data_V_1_load_A = (outStream_V_data_V_1_state_cmp_full & ~outStream_V_data_V_1_sel_wr);

assign outStream_V_data_V_1_load_B = (outStream_V_data_V_1_state_cmp_full & outStream_V_data_V_1_sel_wr);

assign outStream_V_data_V_1_sel = outStream_V_data_V_1_sel_rd;

assign outStream_V_data_V_1_state_cmp_full = ((outStream_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_data_V_1_vld_out = outStream_V_data_V_1_state[1'd0];

assign outStream_V_dest_V_1_ack_in = outStream_V_dest_V_1_state[1'd1];

assign outStream_V_dest_V_1_ack_out = outStream_TREADY;

assign outStream_V_dest_V_1_load_A = (outStream_V_dest_V_1_state_cmp_full & ~outStream_V_dest_V_1_sel_wr);

assign outStream_V_dest_V_1_load_B = (outStream_V_dest_V_1_state_cmp_full & outStream_V_dest_V_1_sel_wr);

assign outStream_V_dest_V_1_sel = outStream_V_dest_V_1_sel_rd;

assign outStream_V_dest_V_1_state_cmp_full = ((outStream_V_dest_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_dest_V_1_vld_out = outStream_V_dest_V_1_state[1'd0];

assign outStream_V_id_V_1_ack_in = outStream_V_id_V_1_state[1'd1];

assign outStream_V_id_V_1_ack_out = outStream_TREADY;

assign outStream_V_id_V_1_load_A = (outStream_V_id_V_1_state_cmp_full & ~outStream_V_id_V_1_sel_wr);

assign outStream_V_id_V_1_load_B = (outStream_V_id_V_1_state_cmp_full & outStream_V_id_V_1_sel_wr);

assign outStream_V_id_V_1_sel = outStream_V_id_V_1_sel_rd;

assign outStream_V_id_V_1_state_cmp_full = ((outStream_V_id_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_id_V_1_vld_out = outStream_V_id_V_1_state[1'd0];

assign outStream_V_keep_V_1_ack_in = outStream_V_keep_V_1_state[1'd1];

assign outStream_V_keep_V_1_ack_out = outStream_TREADY;

assign outStream_V_keep_V_1_load_A = (outStream_V_keep_V_1_state_cmp_full & ~outStream_V_keep_V_1_sel_wr);

assign outStream_V_keep_V_1_load_B = (outStream_V_keep_V_1_state_cmp_full & outStream_V_keep_V_1_sel_wr);

assign outStream_V_keep_V_1_sel = outStream_V_keep_V_1_sel_rd;

assign outStream_V_keep_V_1_state_cmp_full = ((outStream_V_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_keep_V_1_vld_out = outStream_V_keep_V_1_state[1'd0];

assign outStream_V_last_V_1_ack_in = outStream_V_last_V_1_state[1'd1];

assign outStream_V_last_V_1_ack_out = outStream_TREADY;

assign outStream_V_last_V_1_load_A = (outStream_V_last_V_1_state_cmp_full & ~outStream_V_last_V_1_sel_wr);

assign outStream_V_last_V_1_load_B = (outStream_V_last_V_1_state_cmp_full & outStream_V_last_V_1_sel_wr);

assign outStream_V_last_V_1_sel = outStream_V_last_V_1_sel_rd;

assign outStream_V_last_V_1_state_cmp_full = ((outStream_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_last_V_1_vld_out = outStream_V_last_V_1_state[1'd0];

assign outStream_V_strb_V_1_ack_in = outStream_V_strb_V_1_state[1'd1];

assign outStream_V_strb_V_1_ack_out = outStream_TREADY;

assign outStream_V_strb_V_1_load_A = (outStream_V_strb_V_1_state_cmp_full & ~outStream_V_strb_V_1_sel_wr);

assign outStream_V_strb_V_1_load_B = (outStream_V_strb_V_1_state_cmp_full & outStream_V_strb_V_1_sel_wr);

assign outStream_V_strb_V_1_sel = outStream_V_strb_V_1_sel_rd;

assign outStream_V_strb_V_1_state_cmp_full = ((outStream_V_strb_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_strb_V_1_vld_out = outStream_V_strb_V_1_state[1'd0];

assign outStream_V_user_V_1_ack_in = outStream_V_user_V_1_state[1'd1];

assign outStream_V_user_V_1_ack_out = outStream_TREADY;

assign outStream_V_user_V_1_load_A = (outStream_V_user_V_1_state_cmp_full & ~outStream_V_user_V_1_sel_wr);

assign outStream_V_user_V_1_load_B = (outStream_V_user_V_1_state_cmp_full & outStream_V_user_V_1_sel_wr);

assign outStream_V_user_V_1_sel = outStream_V_user_V_1_sel_rd;

assign outStream_V_user_V_1_state_cmp_full = ((outStream_V_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_user_V_1_vld_out = outStream_V_user_V_1_state[1'd0];

assign out_0_V = detections_0;

assign out_1_V = detections_1;

assign out_2_V = detections_2;

assign out_3_V = detections_3;

assign out_4_V = detections_4;

assign out_5_V = detections_5;

assign out_6_V = detections_6;

assign ret_V_cast_fu_552_p1 = $signed(ret_V_fu_546_p2);

assign ret_V_fu_546_p2 = ($signed(17'd1) + $signed(lhs_V_cast_fu_542_p1));

assign rev1_fu_500_p2 = (tmp_25_fu_492_p3 ^ 1'd1);

assign rev2_fu_514_p2 = (tmp_26_fu_506_p3 ^ 1'd1);

assign rev3_fu_528_p2 = (tmp_30_fu_520_p3 ^ 1'd1);

assign rev9_fu_472_p2 = (tmp_23_fu_464_p3 ^ 1'd1);

assign rev_fu_486_p2 = (tmp_24_fu_478_p3 ^ 1'd1);

assign rowCnt_1_fu_768_p2 = (i_op_assign_1_fu_698_p3 + 32'd1);

assign rowCnt_2_fu_780_p3 = ((inStream_V_last_V_0_data_out[0:0] === 1'b1) ? rowCnt_1_fu_768_p2 : i_op_assign_1_fu_698_p3);

assign sel_tmp1004_demorgan_fu_2082_p2 = (tmp_9_reg_3485 | sel_tmp618_demorgan_reg_3588);

assign sel_tmp100_fu_1652_p2 = (sel_tmp99_fu_1647_p2 & rev3_reg_3283);

assign sel_tmp101_fu_1657_p2 = (sel_tmp5_fu_1260_p2 & sel_tmp59_fu_1452_p2);

assign sel_tmp102_fu_1663_p2 = (sel_tmp58_fu_1447_p2 & sel_tmp10_fu_1270_p2);

assign sel_tmp103_fu_1669_p2 = (sel_tmp57_fu_1443_p2 & sel_tmp12_reg_3512);

assign sel_tmp104_fu_1674_p2 = (sel_tmp103_fu_1669_p2 & rev2_reg_3243);

assign sel_tmp105_fu_1679_p2 = (sel_tmp56_reg_3570 & sel_tmp15_reg_3531);

assign sel_tmp106_fu_1683_p2 = (sel_tmp105_fu_1679_p2 & rev1_reg_3219);

assign sel_tmp107_fu_1688_p2 = (sel_tmp106_fu_1683_p2 & rev2_reg_3243);

assign sel_tmp108_fu_1693_p2 = (sel_tmp107_fu_1688_p2 & rev3_reg_3283);

assign sel_tmp109_fu_1698_p2 = (sel_tmp62_fu_1468_p2 & sel_tmp5_fu_1260_p2);

assign sel_tmp10_fu_1270_p2 = (tmp_12_reg_3495 ^ 1'd1);

assign sel_tmp110_fu_1704_p2 = (sel_tmp64_fu_1479_p2 & sel_tmp5_fu_1260_p2);

assign sel_tmp111_fu_1710_p2 = (sel_tmp63_fu_1474_p2 & sel_tmp10_fu_1270_p2);

assign sel_tmp112_fu_1716_p2 = (sel_tmp111_fu_1710_p2 & rev3_reg_3283);

assign sel_tmp113_fu_1721_p2 = (sel_tmp67_fu_1493_p2 & sel_tmp5_fu_1260_p2);

assign sel_tmp114_fu_1727_p2 = (sel_tmp66_fu_1488_p2 & sel_tmp10_fu_1270_p2);

assign sel_tmp115_fu_1733_p2 = (sel_tmp114_fu_1727_p2 & rev3_reg_3283);

assign sel_tmp116_fu_1738_p2 = (sel_tmp65_fu_1484_p2 & sel_tmp12_reg_3512);

assign sel_tmp117_fu_1743_p2 = (sel_tmp116_fu_1738_p2 & rev2_reg_3243);

assign sel_tmp118_fu_1748_p2 = (sel_tmp117_fu_1743_p2 & rev3_reg_3283);

assign sel_tmp119_fu_1753_p2 = (sel_tmp71_fu_1507_p2 & sel_tmp5_fu_1260_p2);

assign sel_tmp11_fu_1275_p2 = (sel_tmp10_fu_1270_p2 & icmp2_reg_3358);

assign sel_tmp120_fu_1759_p2 = (sel_tmp70_fu_1502_p2 & sel_tmp10_fu_1270_p2);

assign sel_tmp121_fu_1765_p2 = (sel_tmp69_fu_1498_p2 & sel_tmp12_reg_3512);

assign sel_tmp122_fu_1770_p2 = (sel_tmp121_fu_1765_p2 & rev2_reg_3243);

assign sel_tmp123_fu_1775_p2 = (sel_tmp68_reg_3576 & sel_tmp15_reg_3531);

assign sel_tmp124_fu_1779_p2 = (sel_tmp123_fu_1775_p2 & rev1_reg_3219);

assign sel_tmp1257_demorgan_fu_2187_p2 = (tmp_10_reg_3490 | sel_tmp1004_demorgan_fu_2082_p2);

assign sel_tmp125_fu_1784_p2 = (sel_tmp124_fu_1779_p2 & rev2_reg_3243);

assign sel_tmp126_fu_1789_p2 = (sel_tmp125_fu_1784_p2 & rev3_reg_3283);

assign sel_tmp127_fu_1794_p2 = (sel_tmp76_fu_1521_p2 & sel_tmp5_fu_1260_p2);

assign sel_tmp128_fu_1800_p2 = (sel_tmp75_fu_1516_p2 & sel_tmp10_fu_1270_p2);

assign sel_tmp129_fu_1806_p2 = (sel_tmp74_fu_1512_p2 & sel_tmp12_reg_3512);

assign sel_tmp12_fu_930_p2 = (tmp_10_fu_836_p2 ^ 1'd1);

assign sel_tmp130_fu_1811_p2 = (sel_tmp129_fu_1806_p2 & rev2_reg_3243);

assign sel_tmp131_fu_1816_p2 = (sel_tmp73_reg_3582 & sel_tmp15_reg_3531);

assign sel_tmp132_fu_1820_p2 = (sel_tmp131_fu_1816_p2 & rev1_reg_3219);

assign sel_tmp133_fu_1825_p2 = (sel_tmp132_fu_1820_p2 & rev2_reg_3243);

assign sel_tmp1349_demorgan_fu_2203_p2 = (tmp_12_reg_3495 | sel_tmp1257_demorgan_fu_2187_p2);

assign sel_tmp134_fu_1830_p2 = (sel_tmp618_demorgan_reg_3588 ^ 1'd1);

assign sel_tmp135_fu_1835_p2 = (sel_tmp134_fu_1830_p2 & rev_reg_3203);

assign sel_tmp1364_demorgan_fu_2219_p2 = (tmp_14_reg_3501 | sel_tmp1349_demorgan_fu_2203_p2);

assign sel_tmp136_fu_1840_p2 = (sel_tmp135_fu_1835_p2 & rev1_reg_3219);

assign sel_tmp137_fu_1845_p2 = (sel_tmp136_fu_1840_p2 & rev2_reg_3243);

assign sel_tmp138_fu_1850_p2 = (sel_tmp88_fu_1588_p2 & sel_tmp10_fu_1270_p2);

assign sel_tmp139_fu_1856_p2 = (sel_tmp138_fu_1850_p2 & rev3_reg_3283);

assign sel_tmp13_fu_1280_p2 = (sel_tmp12_reg_3512 & icmp3_reg_3363);

assign sel_tmp140_fu_1861_p2 = (sel_tmp93_fu_1614_p2 & sel_tmp5_fu_1260_p2);

assign sel_tmp141_fu_1867_p2 = (sel_tmp98_fu_1642_p2 & sel_tmp10_fu_1270_p2);

assign sel_tmp142_fu_1873_p2 = (sel_tmp141_fu_1867_p2 & rev3_reg_3283);

assign sel_tmp143_fu_1878_p2 = (sel_tmp5_fu_1260_p2 & sel_tmp102_fu_1663_p2);

assign sel_tmp144_fu_1884_p2 = (sel_tmp5_fu_1260_p2 & sel_tmp104_fu_1674_p2);

assign sel_tmp145_fu_1890_p2 = (sel_tmp10_fu_1270_p2 & sel_tmp103_fu_1669_p2);

assign sel_tmp146_fu_1896_p2 = (sel_tmp145_fu_1890_p2 & rev3_reg_3283);

assign sel_tmp147_fu_1901_p2 = (sel_tmp5_fu_1260_p2 & sel_tmp107_fu_1688_p2);

assign sel_tmp148_fu_1907_p2 = (sel_tmp10_fu_1270_p2 & sel_tmp106_fu_1683_p2);

assign sel_tmp149_fu_1913_p2 = (sel_tmp148_fu_1907_p2 & rev3_reg_3283);

assign sel_tmp14_fu_1284_p2 = (sel_tmp13_fu_1280_p2 & rev2_reg_3243);

assign sel_tmp150_fu_1918_p2 = (sel_tmp12_reg_3512 & sel_tmp105_fu_1679_p2);

assign sel_tmp151_fu_1923_p2 = (sel_tmp150_fu_1918_p2 & rev2_reg_3243);

assign sel_tmp152_fu_1928_p2 = (sel_tmp151_fu_1923_p2 & rev3_reg_3283);

assign sel_tmp153_fu_1933_p2 = (sel_tmp5_fu_1260_p2 & sel_tmp111_fu_1710_p2);

assign sel_tmp154_fu_1939_p2 = (sel_tmp116_fu_1738_p2 & sel_tmp10_fu_1270_p2);

assign sel_tmp155_fu_1945_p2 = (sel_tmp154_fu_1939_p2 & rev3_reg_3283);

assign sel_tmp156_fu_1950_p2 = (sel_tmp5_fu_1260_p2 & sel_tmp120_fu_1759_p2);

assign sel_tmp157_fu_1956_p2 = (sel_tmp5_fu_1260_p2 & sel_tmp122_fu_1770_p2);

assign sel_tmp158_fu_1962_p2 = (sel_tmp121_fu_1765_p2 & sel_tmp10_fu_1270_p2);

assign sel_tmp159_fu_1968_p2 = (sel_tmp158_fu_1962_p2 & rev3_reg_3283);

assign sel_tmp15_fu_936_p2 = (tmp_9_fu_827_p2 ^ 1'd1);

assign sel_tmp160_fu_1973_p2 = (sel_tmp5_fu_1260_p2 & sel_tmp125_fu_1784_p2);

assign sel_tmp161_fu_1979_p2 = (sel_tmp124_fu_1779_p2 & sel_tmp10_fu_1270_p2);

assign sel_tmp162_fu_1985_p2 = (sel_tmp161_fu_1979_p2 & rev3_reg_3283);

assign sel_tmp163_fu_1990_p2 = (sel_tmp12_reg_3512 & sel_tmp123_fu_1775_p2);

assign sel_tmp164_fu_1995_p2 = (sel_tmp163_fu_1990_p2 & rev2_reg_3243);

assign sel_tmp165_fu_2000_p2 = (sel_tmp164_fu_1995_p2 & rev3_reg_3283);

assign sel_tmp166_fu_2005_p2 = (sel_tmp5_fu_1260_p2 & sel_tmp128_fu_1800_p2);

assign sel_tmp167_fu_2011_p2 = (sel_tmp5_fu_1260_p2 & sel_tmp130_fu_1811_p2);

assign sel_tmp168_fu_2017_p2 = (sel_tmp129_fu_1806_p2 & sel_tmp10_fu_1270_p2);

assign sel_tmp169_fu_2023_p2 = (sel_tmp168_fu_2017_p2 & rev3_reg_3283);

assign sel_tmp16_fu_942_p2 = (sel_tmp15_fu_936_p2 & icmp4_reg_3368);

assign sel_tmp170_fu_2028_p2 = (sel_tmp5_fu_1260_p2 & sel_tmp133_fu_1825_p2);

assign sel_tmp171_fu_2034_p2 = (sel_tmp132_fu_1820_p2 & sel_tmp10_fu_1270_p2);

assign sel_tmp172_fu_2040_p2 = (sel_tmp171_fu_2034_p2 & rev3_reg_3283);

assign sel_tmp173_fu_2045_p2 = (sel_tmp131_fu_1816_p2 & sel_tmp12_reg_3512);

assign sel_tmp174_fu_2050_p2 = (sel_tmp173_fu_2045_p2 & rev2_reg_3243);

assign sel_tmp175_fu_2055_p2 = (sel_tmp174_fu_2050_p2 & rev3_reg_3283);

assign sel_tmp176_fu_2060_p2 = (sel_tmp5_fu_1260_p2 & sel_tmp137_fu_1845_p2);

assign sel_tmp177_fu_2066_p2 = (sel_tmp136_fu_1840_p2 & sel_tmp10_fu_1270_p2);

assign sel_tmp178_fu_2072_p2 = (sel_tmp135_fu_1835_p2 & sel_tmp12_reg_3512);

assign sel_tmp179_fu_2077_p2 = (sel_tmp178_fu_2072_p2 & rev2_reg_3243);

assign sel_tmp17_fu_1289_p2 = (sel_tmp16_reg_3540 & rev1_reg_3219);

assign sel_tmp180_fu_2086_p2 = (sel_tmp1004_demorgan_fu_2082_p2 ^ 1'd1);

assign sel_tmp181_fu_2092_p2 = (sel_tmp180_fu_2086_p2 & rev1_reg_3219);

assign sel_tmp182_fu_2097_p2 = (sel_tmp181_fu_2092_p2 & rev2_reg_3243);

assign sel_tmp183_fu_2102_p2 = (sel_tmp182_fu_2097_p2 & rev3_reg_3283);

assign sel_tmp184_fu_2107_p2 = (sel_tmp5_fu_1260_p2 & sel_tmp138_fu_1850_p2);

assign sel_tmp185_fu_2113_p2 = (sel_tmp150_fu_1918_p2 & sel_tmp10_fu_1270_p2);

assign sel_tmp186_fu_2119_p2 = (sel_tmp185_fu_2113_p2 & rev3_reg_3283);

assign sel_tmp187_fu_2124_p2 = (sel_tmp5_fu_1260_p2 & sel_tmp154_fu_1939_p2);

assign sel_tmp188_fu_2130_p2 = (sel_tmp5_fu_1260_p2 & sel_tmp164_fu_1995_p2);

assign sel_tmp189_fu_2136_p2 = (sel_tmp163_fu_1990_p2 & sel_tmp10_fu_1270_p2);

assign sel_tmp18_fu_1293_p2 = (sel_tmp17_fu_1289_p2 & rev2_reg_3243);

assign sel_tmp190_fu_2142_p2 = (sel_tmp189_fu_2136_p2 & rev3_reg_3283);

assign sel_tmp191_fu_2147_p2 = (sel_tmp5_fu_1260_p2 & sel_tmp174_fu_2050_p2);

assign sel_tmp192_fu_2153_p2 = (sel_tmp173_fu_2045_p2 & sel_tmp10_fu_1270_p2);

assign sel_tmp193_fu_2159_p2 = (sel_tmp192_fu_2153_p2 & rev3_reg_3283);

assign sel_tmp194_fu_2164_p2 = (sel_tmp178_fu_2072_p2 & sel_tmp10_fu_1270_p2);

assign sel_tmp195_fu_2170_p2 = (sel_tmp194_fu_2164_p2 & rev3_reg_3283);

assign sel_tmp196_fu_2175_p2 = (sel_tmp5_fu_1260_p2 & sel_tmp182_fu_2097_p2);

assign sel_tmp197_fu_2181_p2 = (sel_tmp181_fu_2092_p2 & sel_tmp10_fu_1270_p2);

assign sel_tmp198_fu_2192_p2 = (sel_tmp1257_demorgan_fu_2187_p2 ^ 1'd1);

assign sel_tmp199_fu_2198_p2 = (sel_tmp198_fu_2192_p2 & rev2_reg_3243);

assign sel_tmp19_fu_947_p2 = (tmp_7_fu_818_p2 ^ 1'd1);

assign sel_tmp1_fu_859_p2 = (tmp_3_fu_800_p2 & tmp_18_reg_3174);

assign sel_tmp200_fu_2208_p2 = (sel_tmp1349_demorgan_fu_2203_p2 ^ 1'd1);

assign sel_tmp201_fu_2214_p2 = (sel_tmp200_fu_2208_p2 & rev3_reg_3283);

assign sel_tmp202_fu_2224_p2 = (sel_tmp1364_demorgan_fu_2219_p2 ^ 1'd1);

assign sel_tmp203_fu_2235_p2 = (sel_tmp14_fu_1284_p2 | sel_tmp11_fu_1275_p2);

assign sel_tmp204_fu_2252_p2 = (sel_tmp23_fu_1302_p2 | sel_tmp18_fu_1293_p2);

assign sel_tmp205_fu_2258_p2 = (sel_tmp33_fu_1330_p2 | sel_tmp28_fu_1316_p2);

assign sel_tmp206_fu_2299_p2 = (sel_tmp39_fu_1362_p2 | sel_tmp37_fu_1352_p2);

assign sel_tmp207_fu_2334_p2 = (sel_tmp47_fu_1397_p2 | sel_tmp44_fu_1388_p2);

assign sel_tmp208_fu_2357_p2 = (sel_tmp55_fu_1438_p2 | sel_tmp52_fu_1424_p2);

assign sel_tmp209_fu_2386_p2 = (sel_tmp64_fu_1479_p2 | sel_tmp62_fu_1468_p2);

assign sel_tmp20_fu_953_p2 = (sel_tmp19_fu_947_p2 & icmp5_reg_3373);

assign sel_tmp210_fu_2392_p2 = (sel_tmp71_fu_1507_p2 | sel_tmp67_fu_1493_p2);

assign sel_tmp211_fu_2511_p2 = (sel_tmp104_fu_1674_p2 | sel_tmp102_fu_1663_p2);

assign sel_tmp212_fu_2582_p2 = (sel_tmp122_fu_1770_p2 | sel_tmp120_fu_1759_p2);

assign sel_tmp213_fu_2605_p2 = (sel_tmp130_fu_1811_p2 | sel_tmp128_fu_1800_p2);

assign sel_tmp214_fu_2611_p2 = (sel_tmp137_fu_1845_p2 | sel_tmp133_fu_1825_p2);

assign sel_tmp215_fu_2634_p2 = (sel_tmp83_fu_1560_p2 | sel_tmp79_fu_1537_p2);

assign sel_tmp216_fu_2640_p2 = (sel_tmp89_fu_1592_p2 | sel_tmp86_fu_1577_p2);

assign sel_tmp217_fu_2664_p2 = (sel_tmp99_fu_1647_p2 | sel_tmp96_fu_1631_p2);

assign sel_tmp218_fu_2730_p2 = (sel_tmp117_fu_1743_p2 | sel_tmp114_fu_1727_p2);

assign sel_tmp219_fu_2820_p2 = (sel_tmp179_fu_2077_p2 | sel_tmp177_fu_2066_p2);

assign sel_tmp21_fu_958_p2 = (sel_tmp20_fu_953_p2 & rev_reg_3203);

assign sel_tmp220_fu_2843_p2 = (sel_tmp145_fu_1890_p2 | sel_tmp141_fu_1867_p2);

assign sel_tmp221_fu_2849_p2 = (sel_tmp151_fu_1923_p2 | sel_tmp148_fu_1907_p2);

assign sel_tmp222_fu_2879_p2 = (sel_tmp161_fu_1979_p2 | sel_tmp158_fu_1962_p2);

assign sel_tmp223_fu_2903_p2 = (sel_tmp171_fu_2034_p2 | sel_tmp168_fu_2017_p2);

assign sel_tmp224_fu_2957_p2 = (sel_tmp199_fu_2198_p2 | sel_tmp197_fu_2181_p2);

assign sel_tmp225_fu_2974_p2 = (sel_tmp189_fu_2136_p2 | sel_tmp185_fu_2113_p2);

assign sel_tmp226_fu_2980_p2 = (sel_tmp194_fu_2164_p2 | sel_tmp192_fu_2153_p2);

assign sel_tmp227_fu_3144_p2 = (tmp65_fu_3105_p2 | tmp125_fu_3138_p2);

assign sel_tmp228_fu_3156_p2 = (tmp_31_reg_3333 & tmp126_fu_3150_p2);

assign sel_tmp22_fu_1298_p2 = (sel_tmp21_reg_3546 & rev1_reg_3219);

assign sel_tmp23_fu_1302_p2 = (sel_tmp22_fu_1298_p2 & rev2_reg_3243);

assign sel_tmp24_fu_968_p2 = (sel_tmp32_demorgan_fu_963_p2 ^ 1'd1);

assign sel_tmp25_fu_974_p2 = (sel_tmp24_fu_968_p2 & rev9_reg_3191);

assign sel_tmp267_demorgan_fu_1013_p2 = (tmp_5_fu_809_p2 | tmp_3_fu_800_p2);

assign sel_tmp26_fu_1307_p2 = (sel_tmp25_reg_3552 & rev_reg_3203);

assign sel_tmp27_fu_1311_p2 = (sel_tmp26_fu_1307_p2 & rev1_reg_3219);

assign sel_tmp28_fu_1316_p2 = (sel_tmp27_fu_1311_p2 & rev2_reg_3243);

assign sel_tmp29_fu_984_p2 = (sel_tmp38_demorgan_fu_979_p2 ^ 1'd1);

assign sel_tmp2_fu_889_p2 = (tmp_30_reg_3278 & tmp_14_fu_854_p2);

assign sel_tmp30_fu_990_p2 = (sel_tmp29_fu_984_p2 & rev9_reg_3191);

assign sel_tmp31_fu_1321_p2 = (sel_tmp30_reg_3558 & rev_reg_3203);

assign sel_tmp32_demorgan_fu_963_p2 = (tmp_5_fu_809_p2 | tmp_18_reg_3174);

assign sel_tmp32_fu_1325_p2 = (sel_tmp31_fu_1321_p2 & rev1_reg_3219);

assign sel_tmp33_fu_1330_p2 = (sel_tmp32_fu_1325_p2 & rev2_reg_3243);

assign sel_tmp34_fu_1335_p2 = (sel_tmp13_fu_1280_p2 & sel_tmp10_fu_1270_p2);

assign sel_tmp35_fu_1341_p2 = (sel_tmp34_fu_1335_p2 & rev3_reg_3283);

assign sel_tmp36_fu_1346_p2 = (sel_tmp5_fu_1260_p2 & sel_tmp18_fu_1293_p2);

assign sel_tmp37_fu_1352_p2 = (sel_tmp17_fu_1289_p2 & sel_tmp10_fu_1270_p2);

assign sel_tmp38_demorgan_fu_979_p2 = (tmp_3_fu_800_p2 | tmp_19_reg_3180);

assign sel_tmp38_fu_1358_p2 = (sel_tmp16_reg_3540 & sel_tmp12_reg_3512);

assign sel_tmp39_fu_1362_p2 = (sel_tmp38_fu_1358_p2 & rev2_reg_3243);

assign sel_tmp3_fu_864_p2 = (tmp_5_fu_809_p2 & tmp_19_reg_3180);

assign sel_tmp40_fu_1367_p2 = (sel_tmp5_fu_1260_p2 & sel_tmp23_fu_1302_p2);

assign sel_tmp41_fu_1373_p2 = (sel_tmp22_fu_1298_p2 & sel_tmp10_fu_1270_p2);

assign sel_tmp42_fu_1379_p2 = (sel_tmp41_fu_1373_p2 & rev3_reg_3283);

assign sel_tmp43_fu_1384_p2 = (sel_tmp21_reg_3546 & sel_tmp12_reg_3512);

assign sel_tmp44_fu_1388_p2 = (sel_tmp43_fu_1384_p2 & rev2_reg_3243);

assign sel_tmp45_fu_995_p2 = (sel_tmp20_fu_953_p2 & sel_tmp15_fu_936_p2);

assign sel_tmp46_fu_1393_p2 = (sel_tmp45_reg_3564 & rev1_reg_3219);

assign sel_tmp47_fu_1397_p2 = (sel_tmp46_fu_1393_p2 & rev2_reg_3243);

assign sel_tmp48_fu_1402_p2 = (sel_tmp5_fu_1260_p2 & sel_tmp28_fu_1316_p2);

assign sel_tmp49_fu_1408_p2 = (sel_tmp27_fu_1311_p2 & sel_tmp10_fu_1270_p2);

assign sel_tmp4_fu_924_p2 = (tmp5_fu_918_p2 | tmp2_fu_900_p2);

assign sel_tmp50_fu_1414_p2 = (sel_tmp49_fu_1408_p2 & rev3_reg_3283);

assign sel_tmp51_fu_1419_p2 = (sel_tmp26_fu_1307_p2 & sel_tmp12_reg_3512);

assign sel_tmp52_fu_1424_p2 = (sel_tmp51_fu_1419_p2 & rev2_reg_3243);

assign sel_tmp53_fu_1429_p2 = (sel_tmp25_reg_3552 & sel_tmp15_reg_3531);

assign sel_tmp54_fu_1433_p2 = (sel_tmp53_fu_1429_p2 & rev1_reg_3219);

assign sel_tmp55_fu_1438_p2 = (sel_tmp54_fu_1433_p2 & rev2_reg_3243);

assign sel_tmp56_fu_1001_p2 = (sel_tmp24_fu_968_p2 & sel_tmp19_fu_947_p2);

assign sel_tmp57_fu_1443_p2 = (sel_tmp56_reg_3570 & rev_reg_3203);

assign sel_tmp58_fu_1447_p2 = (sel_tmp57_fu_1443_p2 & rev1_reg_3219);

assign sel_tmp59_fu_1452_p2 = (sel_tmp58_fu_1447_p2 & rev2_reg_3243);

assign sel_tmp5_fu_1260_p2 = (tmp_14_reg_3501 ^ 1'd1);

assign sel_tmp60_fu_1457_p2 = (sel_tmp59_fu_1452_p2 & rev3_reg_3283);

assign sel_tmp618_demorgan_fu_1030_p2 = (tmp_7_fu_818_p2 | sel_tmp267_demorgan_fu_1013_p2);

assign sel_tmp61_fu_1462_p2 = (sel_tmp5_fu_1260_p2 & sel_tmp33_fu_1330_p2);

assign sel_tmp62_fu_1468_p2 = (sel_tmp32_fu_1325_p2 & sel_tmp10_fu_1270_p2);

assign sel_tmp63_fu_1474_p2 = (sel_tmp31_fu_1321_p2 & sel_tmp12_reg_3512);

assign sel_tmp64_fu_1479_p2 = (sel_tmp63_fu_1474_p2 & rev2_reg_3243);

assign sel_tmp65_fu_1484_p2 = (sel_tmp30_reg_3558 & sel_tmp15_reg_3531);

assign sel_tmp66_fu_1488_p2 = (sel_tmp65_fu_1484_p2 & rev1_reg_3219);

assign sel_tmp67_fu_1493_p2 = (sel_tmp66_fu_1488_p2 & rev2_reg_3243);

assign sel_tmp68_fu_1007_p2 = (sel_tmp29_fu_984_p2 & sel_tmp19_fu_947_p2);

assign sel_tmp69_fu_1498_p2 = (sel_tmp68_reg_3576 & rev_reg_3203);

assign sel_tmp6_fu_869_p2 = (tmp_7_fu_818_p2 & tmp_23_reg_3186);

assign sel_tmp70_fu_1502_p2 = (sel_tmp69_fu_1498_p2 & rev1_reg_3219);

assign sel_tmp71_fu_1507_p2 = (sel_tmp70_fu_1502_p2 & rev2_reg_3243);

assign sel_tmp72_fu_1019_p2 = (sel_tmp267_demorgan_fu_1013_p2 ^ 1'd1);

assign sel_tmp73_fu_1025_p2 = (sel_tmp72_fu_1019_p2 & rev9_reg_3191);

assign sel_tmp74_fu_1512_p2 = (sel_tmp73_reg_3582 & rev_reg_3203);

assign sel_tmp75_fu_1516_p2 = (sel_tmp74_fu_1512_p2 & rev1_reg_3219);

assign sel_tmp76_fu_1521_p2 = (sel_tmp75_fu_1516_p2 & rev2_reg_3243);

assign sel_tmp77_fu_1526_p2 = (sel_tmp76_fu_1521_p2 & rev3_reg_3283);

assign sel_tmp78_fu_1531_p2 = (sel_tmp5_fu_1260_p2 & sel_tmp34_fu_1335_p2);

assign sel_tmp79_fu_1537_p2 = (sel_tmp38_fu_1358_p2 & sel_tmp10_fu_1270_p2);

assign sel_tmp7_fu_879_p2 = (tmp_25_reg_3214 & tmp_10_fu_836_p2);

assign sel_tmp80_fu_1543_p2 = (sel_tmp79_fu_1537_p2 & rev3_reg_3283);

assign sel_tmp81_fu_1548_p2 = (sel_tmp5_fu_1260_p2 & sel_tmp41_fu_1373_p2);

assign sel_tmp82_fu_1554_p2 = (sel_tmp5_fu_1260_p2 & sel_tmp44_fu_1388_p2);

assign sel_tmp83_fu_1560_p2 = (sel_tmp43_fu_1384_p2 & sel_tmp10_fu_1270_p2);

assign sel_tmp84_fu_1566_p2 = (sel_tmp83_fu_1560_p2 & rev3_reg_3283);

assign sel_tmp85_fu_1571_p2 = (sel_tmp5_fu_1260_p2 & sel_tmp47_fu_1397_p2);

assign sel_tmp86_fu_1577_p2 = (sel_tmp46_fu_1393_p2 & sel_tmp10_fu_1270_p2);

assign sel_tmp87_fu_1583_p2 = (sel_tmp86_fu_1577_p2 & rev3_reg_3283);

assign sel_tmp88_fu_1588_p2 = (sel_tmp45_reg_3564 & sel_tmp12_reg_3512);

assign sel_tmp89_fu_1592_p2 = (sel_tmp88_fu_1588_p2 & rev2_reg_3243);

assign sel_tmp8_fu_1265_p2 = (sel_tmp5_fu_1260_p2 & icmp1_reg_3353);

assign sel_tmp90_fu_1597_p2 = (sel_tmp89_fu_1592_p2 & rev3_reg_3283);

assign sel_tmp91_fu_1602_p2 = (sel_tmp5_fu_1260_p2 & sel_tmp49_fu_1408_p2);

assign sel_tmp92_fu_1608_p2 = (sel_tmp5_fu_1260_p2 & sel_tmp52_fu_1424_p2);

assign sel_tmp93_fu_1614_p2 = (sel_tmp51_fu_1419_p2 & sel_tmp10_fu_1270_p2);

assign sel_tmp94_fu_1620_p2 = (sel_tmp93_fu_1614_p2 & rev3_reg_3283);

assign sel_tmp95_fu_1625_p2 = (sel_tmp5_fu_1260_p2 & sel_tmp55_fu_1438_p2);

assign sel_tmp96_fu_1631_p2 = (sel_tmp54_fu_1433_p2 & sel_tmp10_fu_1270_p2);

assign sel_tmp97_fu_1637_p2 = (sel_tmp96_fu_1631_p2 & rev3_reg_3283);

assign sel_tmp98_fu_1642_p2 = (sel_tmp53_fu_1429_p2 & sel_tmp12_reg_3512);

assign sel_tmp99_fu_1647_p2 = (sel_tmp98_fu_1642_p2 & rev2_reg_3243);

assign sel_tmp9_fu_874_p2 = (tmp_9_fu_827_p2 & tmp_24_reg_3198);

assign sel_tmp_fu_884_p2 = (tmp_26_reg_3238 & tmp_12_fu_845_p2);

assign tmp100_fu_2861_p2 = (tmp99_fu_2855_p2 & sel_tmp5_fu_1260_p2);

assign tmp101_fu_2867_p2 = (tmp98_fu_2837_p2 | tmp100_fu_2861_p2);

assign tmp102_fu_2873_p2 = (sel_tmp187_fu_2124_p2 | sel_tmp186_fu_2119_p2);

assign tmp103_fu_2885_p2 = (sel_tmp5_fu_1260_p2 & sel_tmp222_fu_2879_p2);

assign tmp104_fu_2891_p2 = (tmp103_fu_2885_p2 | tmp102_fu_2873_p2);

assign tmp105_fu_2897_p2 = (sel_tmp190_fu_2142_p2 | sel_tmp188_fu_2130_p2);

assign tmp106_fu_2909_p2 = (sel_tmp5_fu_1260_p2 & sel_tmp223_fu_2903_p2);

assign tmp107_fu_2915_p2 = (tmp106_fu_2909_p2 | tmp105_fu_2897_p2);

assign tmp108_fu_2921_p2 = (tmp107_fu_2915_p2 | tmp104_fu_2891_p2);

assign tmp109_fu_2927_p2 = (tmp108_fu_2921_p2 | tmp101_fu_2867_p2);

assign tmp10_fu_2270_p2 = (tmp9_fu_2264_p2 & rev3_reg_3283);

assign tmp110_fu_2933_p2 = (sel_tmp193_fu_2159_p2 | sel_tmp191_fu_2147_p2);

assign tmp111_fu_2939_p2 = (sel_tmp5_fu_1260_p2 & sel_tmp219_fu_2820_p2);

assign tmp112_fu_2945_p2 = (tmp111_fu_2939_p2 | tmp110_fu_2933_p2);

assign tmp113_fu_2951_p2 = (sel_tmp196_fu_2175_p2 | sel_tmp195_fu_2170_p2);

assign tmp114_fu_2963_p2 = (sel_tmp224_fu_2957_p2 & rev3_reg_3283);

assign tmp115_fu_2968_p2 = (tmp114_fu_2963_p2 | tmp113_fu_2951_p2);

assign tmp116_fu_3124_p2 = (tmp115_reg_3686 | tmp112_reg_3681);

assign tmp117_fu_2986_p2 = (sel_tmp226_fu_2980_p2 | sel_tmp225_fu_2974_p2);

assign tmp118_fu_2992_p2 = (tmp117_fu_2986_p2 & sel_tmp5_fu_1260_p2);

assign tmp119_fu_2998_p2 = (sel_tmp5_fu_1260_p2 & sel_tmp224_fu_2957_p2);

assign tmp11_fu_2275_p2 = (tmp8_fu_2246_p2 | tmp10_fu_2270_p2);

assign tmp120_fu_3004_p2 = (sel_tmp202_fu_2224_p2 | sel_tmp201_fu_2214_p2);

assign tmp121_fu_3010_p2 = (tmp120_fu_3004_p2 | tmp119_fu_2998_p2);

assign tmp122_fu_3016_p2 = (tmp121_fu_3010_p2 | tmp118_fu_2992_p2);

assign tmp123_fu_3128_p2 = (tmp122_reg_3691 | tmp116_fu_3124_p2);

assign tmp124_fu_3133_p2 = (tmp123_fu_3128_p2 | tmp109_reg_3676);

assign tmp125_fu_3138_p2 = (tmp95_fu_3118_p2 | tmp124_fu_3133_p2);

assign tmp126_fu_3150_p2 = (sel_tmp227_fu_3144_p2 & or_cond_fu_3092_p2);

assign tmp12_fu_2281_p2 = (sel_tmp5_fu_1260_p2 & sel_tmp203_fu_2235_p2);

assign tmp13_fu_2287_p2 = (sel_tmp36_fu_1346_p2 | sel_tmp35_fu_1341_p2);

assign tmp14_fu_2293_p2 = (tmp13_fu_2287_p2 | tmp12_fu_2281_p2);

assign tmp15_fu_2305_p2 = (sel_tmp206_fu_2299_p2 & rev3_reg_3283);

assign tmp16_fu_2310_p2 = (sel_tmp42_fu_1379_p2 | sel_tmp40_fu_1367_p2);

assign tmp17_fu_2316_p2 = (tmp16_fu_2310_p2 | tmp15_fu_2305_p2);

assign tmp18_fu_2322_p2 = (tmp17_fu_2316_p2 | tmp14_fu_2293_p2);

assign tmp19_fu_2328_p2 = (tmp18_fu_2322_p2 | tmp11_fu_2275_p2);

assign tmp1_fu_894_p2 = (sel_tmp6_fu_869_p2 | sel_tmp3_fu_864_p2);

assign tmp20_fu_2340_p2 = (sel_tmp207_fu_2334_p2 & rev3_reg_3283);

assign tmp21_fu_2345_p2 = (sel_tmp50_fu_1414_p2 | sel_tmp48_fu_1402_p2);

assign tmp22_fu_2351_p2 = (tmp21_fu_2345_p2 | tmp20_fu_2340_p2);

assign tmp23_fu_2363_p2 = (sel_tmp208_fu_2357_p2 & rev3_reg_3283);

assign tmp24_fu_2368_p2 = (sel_tmp61_fu_1462_p2 | sel_tmp60_fu_1457_p2);

assign tmp25_fu_2374_p2 = (tmp24_fu_2368_p2 | tmp23_fu_2363_p2);

assign tmp26_fu_2380_p2 = (tmp25_fu_2374_p2 | tmp22_fu_2351_p2);

assign tmp27_fu_2398_p2 = (sel_tmp210_fu_2392_p2 | sel_tmp209_fu_2386_p2);

assign tmp28_fu_2404_p2 = (tmp27_fu_2398_p2 & rev3_reg_3283);

assign tmp29_fu_2409_p2 = (sel_tmp78_fu_1531_p2 | sel_tmp77_fu_1526_p2);

assign tmp2_fu_900_p2 = (tmp1_fu_894_p2 | sel_tmp1_fu_859_p2);

assign tmp30_fu_2415_p2 = (sel_tmp5_fu_1260_p2 & sel_tmp206_fu_2299_p2);

assign tmp31_fu_2421_p2 = (tmp30_fu_2415_p2 | tmp29_fu_2409_p2);

assign tmp32_fu_2427_p2 = (tmp31_fu_2421_p2 | tmp28_fu_2404_p2);

assign tmp33_fu_2433_p2 = (tmp32_fu_2427_p2 | tmp26_fu_2380_p2);

assign tmp34_fu_2439_p2 = (tmp33_fu_2433_p2 | tmp19_fu_2328_p2);

assign tmp35_fu_2445_p2 = (sel_tmp81_fu_1548_p2 | sel_tmp80_fu_1543_p2);

assign tmp36_fu_2451_p2 = (sel_tmp84_fu_1566_p2 | sel_tmp82_fu_1554_p2);

assign tmp37_fu_2457_p2 = (tmp36_fu_2451_p2 | tmp35_fu_2445_p2);

assign tmp38_fu_2463_p2 = (sel_tmp87_fu_1583_p2 | sel_tmp85_fu_1571_p2);

assign tmp39_fu_2469_p2 = (sel_tmp91_fu_1602_p2 | sel_tmp90_fu_1597_p2);

assign tmp3_fu_906_p2 = (sel_tmp9_fu_874_p2 | sel_tmp7_fu_879_p2);

assign tmp40_fu_2475_p2 = (tmp39_fu_2469_p2 | tmp38_fu_2463_p2);

assign tmp41_fu_2481_p2 = (tmp40_fu_2475_p2 | tmp37_fu_2457_p2);

assign tmp42_fu_2487_p2 = (sel_tmp94_fu_1620_p2 | sel_tmp92_fu_1608_p2);

assign tmp43_fu_2493_p2 = (sel_tmp97_fu_1637_p2 | sel_tmp95_fu_1625_p2);

assign tmp44_fu_2499_p2 = (tmp43_fu_2493_p2 | tmp42_fu_2487_p2);

assign tmp45_fu_2505_p2 = (sel_tmp101_fu_1657_p2 | sel_tmp100_fu_1652_p2);

assign tmp46_fu_2517_p2 = (sel_tmp211_fu_2511_p2 & rev3_reg_3283);

assign tmp47_fu_2522_p2 = (tmp46_fu_2517_p2 | tmp45_fu_2505_p2);

assign tmp48_fu_2528_p2 = (tmp47_fu_2522_p2 | tmp44_fu_2499_p2);

assign tmp49_fu_2534_p2 = (tmp48_fu_2528_p2 | tmp41_fu_2481_p2);

assign tmp4_fu_912_p2 = (sel_tmp_fu_884_p2 | sel_tmp2_fu_889_p2);

assign tmp50_fu_2540_p2 = (sel_tmp109_fu_1698_p2 | sel_tmp108_fu_1693_p2);

assign tmp51_fu_2546_p2 = (sel_tmp112_fu_1716_p2 | sel_tmp110_fu_1704_p2);

assign tmp52_fu_2552_p2 = (tmp51_fu_2546_p2 | tmp50_fu_2540_p2);

assign tmp53_fu_2558_p2 = (sel_tmp115_fu_1733_p2 | sel_tmp113_fu_1721_p2);

assign tmp54_fu_2564_p2 = (sel_tmp119_fu_1753_p2 | sel_tmp118_fu_1748_p2);

assign tmp55_fu_2570_p2 = (tmp54_fu_2564_p2 | tmp53_fu_2558_p2);

assign tmp56_fu_2576_p2 = (tmp55_fu_2570_p2 | tmp52_fu_2552_p2);

assign tmp57_fu_2588_p2 = (sel_tmp212_fu_2582_p2 & rev3_reg_3283);

assign tmp58_fu_2593_p2 = (sel_tmp127_fu_1794_p2 | sel_tmp126_fu_1789_p2);

assign tmp59_fu_2599_p2 = (tmp58_fu_2593_p2 | tmp57_fu_2588_p2);

assign tmp5_fu_918_p2 = (tmp4_fu_912_p2 | tmp3_fu_906_p2);

assign tmp60_fu_2617_p2 = (sel_tmp214_fu_2611_p2 | sel_tmp213_fu_2605_p2);

assign tmp61_fu_2623_p2 = (tmp60_fu_2617_p2 & rev3_reg_3283);

assign tmp62_fu_2628_p2 = (tmp61_fu_2623_p2 | tmp59_fu_2599_p2);

assign tmp63_fu_3096_p2 = (tmp62_reg_3651 | tmp56_reg_3646);

assign tmp64_fu_3100_p2 = (tmp63_fu_3096_p2 | tmp49_reg_3641);

assign tmp65_fu_3105_p2 = (tmp64_fu_3100_p2 | tmp34_reg_3636);

assign tmp66_fu_2646_p2 = (sel_tmp216_fu_2640_p2 | sel_tmp215_fu_2634_p2);

assign tmp67_fu_2652_p2 = (tmp66_fu_2646_p2 & sel_tmp5_fu_1260_p2);

assign tmp68_fu_2658_p2 = (sel_tmp140_fu_1861_p2 | sel_tmp139_fu_1856_p2);

assign tmp69_fu_2670_p2 = (sel_tmp5_fu_1260_p2 & sel_tmp217_fu_2664_p2);

assign tmp6_fu_2230_p2 = (sel_tmp8_fu_1265_p2 | icmp_reg_3348);

assign tmp70_fu_2676_p2 = (tmp69_fu_2670_p2 | tmp68_fu_2658_p2);

assign tmp71_fu_2682_p2 = (tmp70_fu_2676_p2 | tmp67_fu_2652_p2);

assign tmp72_fu_2688_p2 = (sel_tmp143_fu_1878_p2 | sel_tmp142_fu_1873_p2);

assign tmp73_fu_2694_p2 = (sel_tmp146_fu_1896_p2 | sel_tmp144_fu_1884_p2);

assign tmp74_fu_2700_p2 = (tmp73_fu_2694_p2 | tmp72_fu_2688_p2);

assign tmp75_fu_2706_p2 = (sel_tmp149_fu_1913_p2 | sel_tmp147_fu_1901_p2);

assign tmp76_fu_2712_p2 = (sel_tmp153_fu_1933_p2 | sel_tmp152_fu_1928_p2);

assign tmp77_fu_2718_p2 = (tmp76_fu_2712_p2 | tmp75_fu_2706_p2);

assign tmp78_fu_2724_p2 = (tmp77_fu_2718_p2 | tmp74_fu_2700_p2);

assign tmp79_fu_3110_p2 = (tmp78_reg_3661 | tmp71_reg_3656);

assign tmp7_fu_2241_p2 = (sel_tmp203_fu_2235_p2 & rev3_reg_3283);

assign tmp80_fu_2736_p2 = (sel_tmp5_fu_1260_p2 & sel_tmp218_fu_2730_p2);

assign tmp81_fu_2742_p2 = (sel_tmp156_fu_1950_p2 | sel_tmp155_fu_1945_p2);

assign tmp82_fu_2748_p2 = (tmp81_fu_2742_p2 | tmp80_fu_2736_p2);

assign tmp83_fu_2754_p2 = (sel_tmp159_fu_1968_p2 | sel_tmp157_fu_1956_p2);

assign tmp84_fu_2760_p2 = (sel_tmp162_fu_1985_p2 | sel_tmp160_fu_1973_p2);

assign tmp85_fu_2766_p2 = (tmp84_fu_2760_p2 | tmp83_fu_2754_p2);

assign tmp86_fu_2772_p2 = (tmp85_fu_2766_p2 | tmp82_fu_2748_p2);

assign tmp87_fu_2778_p2 = (sel_tmp166_fu_2005_p2 | sel_tmp165_fu_2000_p2);

assign tmp88_fu_2784_p2 = (sel_tmp169_fu_2023_p2 | sel_tmp167_fu_2011_p2);

assign tmp89_fu_2790_p2 = (tmp88_fu_2784_p2 | tmp87_fu_2778_p2);

assign tmp8_fu_2246_p2 = (tmp7_fu_2241_p2 | tmp6_fu_2230_p2);

assign tmp90_fu_2796_p2 = (sel_tmp172_fu_2040_p2 | sel_tmp170_fu_2028_p2);

assign tmp91_fu_2802_p2 = (sel_tmp176_fu_2060_p2 | sel_tmp175_fu_2055_p2);

assign tmp92_fu_2808_p2 = (tmp91_fu_2802_p2 | tmp90_fu_2796_p2);

assign tmp93_fu_2814_p2 = (tmp92_fu_2808_p2 | tmp89_fu_2790_p2);

assign tmp94_fu_3114_p2 = (tmp93_reg_3671 | tmp86_reg_3666);

assign tmp95_fu_3118_p2 = (tmp94_fu_3114_p2 | tmp79_fu_3110_p2);

assign tmp96_fu_2826_p2 = (sel_tmp219_fu_2820_p2 & rev3_reg_3283);

assign tmp97_fu_2831_p2 = (sel_tmp184_fu_2107_p2 | sel_tmp183_fu_2102_p2);

assign tmp98_fu_2837_p2 = (tmp97_fu_2831_p2 | tmp96_fu_2826_p2);

assign tmp99_fu_2855_p2 = (sel_tmp221_fu_2849_p2 | sel_tmp220_fu_2843_p2);

assign tmp9_fu_2264_p2 = (sel_tmp205_fu_2258_p2 | sel_tmp204_fu_2252_p2);

assign tmp_10_fu_836_p2 = ((i_op_assign_reg_3422 == tmp_s_fu_832_p1) ? 1'b1 : 1'b0);

assign tmp_11_fu_841_p1 = $signed(pos_5_V);

assign tmp_127_fu_730_p1 = inStream_V_data_V_0_data_out[7:0];

assign tmp_12_fu_845_p2 = ((i_op_assign_reg_3422 == tmp_11_fu_841_p1) ? 1'b1 : 1'b0);

assign tmp_13_fu_850_p1 = $signed(pos_6_V);

assign tmp_14_fu_854_p2 = ((i_op_assign_reg_3422 == tmp_13_fu_850_p1) ? 1'b1 : 1'b0);

assign tmp_15_fu_538_p0 = horizontalPos_V;

assign tmp_15_fu_538_p1 = tmp_15_fu_538_p0;

assign tmp_16_fu_714_p2 = ((i_op_assign_1_fu_698_p3 == tmp_15_reg_3338) ? 1'b1 : 1'b0);

assign tmp_17_fu_719_p2 = ((i_op_assign_1_fu_698_p3 == ret_V_cast_reg_3343) ? 1'b1 : 1'b0);

assign tmp_1_fu_692_p2 = ((inStream_V_user_V_0_data_out == 2'd1) ? 1'b1 : 1'b0);

assign tmp_20_fu_724_p2 = ((inStream_V_data_V_0_data_out > 24'd6619135) ? 1'b1 : 1'b0);

assign tmp_21_fu_734_p2 = ((tmp_127_fu_730_p1 > 8'd100) ? 1'b1 : 1'b0);

assign tmp_22_fu_750_p2 = ((lhs_V_3_cast_fu_740_p4 > 8'd100) ? 1'b1 : 1'b0);

assign tmp_23_fu_464_p3 = enable_V[32'd3];

assign tmp_24_fu_478_p3 = enable_V[32'd4];

assign tmp_25_fu_492_p3 = enable_V[32'd5];

assign tmp_26_fu_506_p3 = enable_V[32'd6];

assign tmp_27_fu_3161_p2 = (sel_tmp4_reg_3507_pp0_iter2_reg | sel_tmp228_fu_3156_p2);

assign tmp_28_fu_756_p2 = (tmp_22_fu_750_p2 | tmp_21_fu_734_p2);

assign tmp_29_fu_762_p2 = (tmp_28_fu_756_p2 | tmp_20_fu_724_p2);

assign tmp_2_fu_796_p1 = $signed(pos_0_V);

assign tmp_30_fu_520_p3 = enable_V[32'd7];

assign tmp_31_fu_534_p1 = enable_V[0:0];

assign tmp_32_fu_556_p4 = {{enable_V[7:1]}};

assign tmp_33_fu_572_p4 = {{enable_V[6:1]}};

assign tmp_34_fu_588_p4 = {{enable_V[5:1]}};

assign tmp_35_fu_604_p4 = {{enable_V[4:1]}};

assign tmp_36_fu_620_p4 = {{enable_V[3:1]}};

assign tmp_37_fu_636_p4 = {{enable_V[2:1]}};

assign tmp_3_fu_800_p2 = ((i_op_assign_reg_3422 == tmp_2_fu_796_p1) ? 1'b1 : 1'b0);

assign tmp_4_fu_805_p1 = $signed(pos_1_V);

assign tmp_5_fu_809_p2 = ((i_op_assign_reg_3422 == tmp_4_fu_805_p1) ? 1'b1 : 1'b0);

assign tmp_6_fu_814_p1 = $signed(pos_2_V);

assign tmp_7_fu_818_p2 = ((i_op_assign_reg_3422 == tmp_6_fu_814_p1) ? 1'b1 : 1'b0);

assign tmp_8_fu_823_p1 = $signed(pos_3_V);

assign tmp_9_fu_827_p2 = ((i_op_assign_reg_3422 == tmp_8_fu_823_p1) ? 1'b1 : 1'b0);

assign tmp_data_V_fu_3166_p3 = ((tmp_27_fu_3161_p2[0:0] === 1'b1) ? 24'd65280 : tmp_data_V_1_reg_3387_pp0_iter2_reg);

assign tmp_s_fu_832_p1 = $signed(pos_4_V);

endmodule //nodeDetector
